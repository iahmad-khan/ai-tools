#!/usr/bin/env python
# This script helps to perform power operations
# on IPMI-enabled hosts via Foreman.
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>
# July 2013

# Exit codes:
#  0 all power operations succeeded
#  1 some power operations failed
#  10 bad command line
#  20 current TGT is not valid or missing
#  30 failed to obtain a SSO cookie
#  31 SSO cookie obtained but failed to read it

import logging
import argparse
import sys
import os
import tempfile
import socket
import json
import re
import cookielib
import requests

from subprocess import Popen, PIPE

class AiRemotePowerControlError(Exception):
    pass

VALID_OPERATIONS=("on", "off", "soft", "cycle", "status")
DEFAULT_OPERATION=("status")
DEFAULT_LOGGING_LEVEL=logging.ERROR
DEFAULT_FOREMAN_HOSTNAME = "judy.cern.ch"
DEFAULT_FOREMAN_PORT = 443
DEFAULT_COOKIEJAR_LOCATION = os.path.expanduser("~")
CERN_CA_BUNDLE = "/etc/ssl/certs/CERN-bundle.pem"

def __execute_command(args):
    logging.debug("Executing %s" % args)
    env = os.environ.copy()
    process = Popen(args, stdout=PIPE, stderr=PIPE, env=env)
    (stdout, stderr)  = process.communicate()
    returncode = process.returncode
    return (process.returncode, stdout, stderr)

def valid_tgt():
    status, stdout, stderr = __execute_command(["klist", "-s"])
    if status != 0:
        logging.error(stderr)
    return status == 0

def get_sso_cookiejar(args):
    try:
        fd, cookiejar_path = tempfile.mkstemp(
            suffix="foreman-cookiejar-%s" % socket.gethostname(),
            dir=args.cookiejar_path)
        os.close(fd)
    except OSError, error:
        raise AiRemotePowerControlError("Can't create temporary file for the cookie jar")

    status, stdout, stderr = __execute_command(["cern-get-sso-cookie",
        "--krb", "-u", "https://%s" % args.hostname, "-o",
        cookiejar_path, "-r"])
    if status != 0:
        raise AiRemotePowerControlError("Failed to get cookiejar (%s)" % stderr)

    return cookiejar_path

def print_output(args, summary):
    if args.json:
        print json.dumps(summary)
    else:
        print "Summary on applying '%s' operation to the specified FQDNs:" % \
            args.operation
        if args.errors:
            print "(only errors are shown)"
        for fqdn in summary['fqdns']:
            sys.stdout.write(" * %s: " % fqdn['fqdn'])
            if fqdn['success'] and args.operation == "status":
                print fqdn['details']
            elif fqdn['success']:
                print "Command sent"
            else:
                print "Error (%s)" % fqdn['details']
        print "End of summary"

def foreman_power_operation(args, cookiejar, operation, fqdn):
    logging.debug("Executing '%s' on host '%s'" % (operation, fqdn))
    ipmifqdn = re.sub(r'\.cern\.ch$', "-ipmi.cern.ch", fqdn)
    url="https://%s:%s/api/hosts/%s/interfaces/%s/power" % \
        (args.hostname, args.port, fqdn, ipmifqdn)
    logging.debug("Via URL: %s" % url)
    payload = json.dumps({'power_action': operation})
    headers = {'Content-type': 'application/json',
        'Accept': 'application/json, version=2'}
    try:
        response = requests.put(url, data=payload, 
            headers=headers, cookies=cookiejar,
            verify=CERN_CA_BUNDLE)
        if response.status_code == requests.codes.ok:
            msg = ""
            if operation == "status":
                msg = json.loads(response.text)["power"].upper()
            return (True, msg)
        elif response.status_code == requests.codes.found or \
            response.status_code == requests.codes.unauthorized:
                return (False, "Authentication failed")
        elif response.status_code == requests.codes.not_found:
            return (False, "Host not in Foreman or without an IPMI interface")
        else:
            return (False, "Uncontrolled status code (%s), please report a bug" %
                response.status_code)
    except requests.exceptions.ConnectionError, error:
        return (False, "Connection error (%s)" % error)
    except requests.exceptions.Timeout, error:
        return (False, "Connection timeout")

def configure_logging(args):
    logging_level = DEFAULT_LOGGING_LEVEL
    if args.verbose:
        logging_level = logging.DEBUG
    logging.basicConfig(level=logging_level, format="%(message)s")

def parse_cmdline_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--operation',
        help="Power operation to perform (%s) (default: %s)" % \
            (", ".join(VALID_OPERATIONS), DEFAULT_OPERATION),
        default=DEFAULT_OPERATION)
    parser.add_argument('-j', '--json',
        action="store_true",
        help="Produce JSON output")
    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-e', '--errors',
        action="store_true",
        help="Outputs errors only")
    parser.add_argument('--foreman-hostname', dest="hostname",
        help="Foreman hostname (default: %s)" % DEFAULT_FOREMAN_HOSTNAME,
        default=DEFAULT_FOREMAN_HOSTNAME)
    parser.add_argument('--foreman-port', dest="port",
        help="Foreman port (default: %s)" % DEFAULT_FOREMAN_PORT,
        default=DEFAULT_FOREMAN_PORT)
    parser.add_argument('-c', '--cookiejar-path',
        help="Directory where the cookiejar will temporary live (default: %s)" % \
            DEFAULT_COOKIEJAR_LOCATION,
        default=DEFAULT_COOKIEJAR_LOCATION)
    parser.add_argument('fqdns', nargs='+',
        help="One of more FQDNs",
        metavar="FQDN")
    args = parser.parse_args()
    return args

def main():
    try:
        args = parse_cmdline_args()
    except AiRemotePowerControlError, error:
        logging.error("Wrong command line args (%s)\n" % error)
        return 10

    configure_logging(args)

    if args.operation not in VALID_OPERATIONS:
        logging.error("Operation '%s' not valid." % args.operation)
        return 10

    logging.debug("Validating TGT...")
    if not valid_tgt():
        logging.error("TGT expired or non-existent")
        return 20

    logging.debug("Getting SSO cookie...")
    try:
        cookiejar_path = get_sso_cookiejar(args)
    except AiRemotePowerControlError, error:
        logging.error("SSO %s" % error)
        return 30

    logging.debug("Loading cookie jar...")
    cookiejar = cookielib.MozillaCookieJar(cookiejar_path)
    try:
        cookiejar.load()
    except cookielib.LoadError, error:
        logging.error("Unable to read cookies from '%s'" % cookiejar_path)
        return 31

    summary = {'fqdns': []}

    for fqdn in args.fqdns:
        logging.debug("Processing '%s'" % fqdn)
        fqdn_summary = {'fqdn': fqdn, 'success': False}

        if re.match(r".+?\.cern\.ch$", fqdn) is None:
            fqdn_summary['details'] = "Invalid FQDN"
            summary['fqdns'].append(fqdn_summary)
        else:
            fqdn_summary['success'], fqdn_summary['details'] = \
                foreman_power_operation(args, cookiejar, args.operation, fqdn)
        
        if fqdn_summary['success'] and args.errors:
            pass
        else:
            summary['fqdns'].append(fqdn_summary)

    print_output(args, summary)

    logging.debug("Removing cookie jar...")
    os.remove(cookiejar_path)

    failures = reduce(lambda x, y: x+1 if y['success'] is False else x,
        summary['fqdns'], 0)
    if failures:
        return 1
    return 0

if __name__ == '__main__':
    sys.exit(main())
