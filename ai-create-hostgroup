#!/bin/bash
# This is a helper script that creates an skeleton
# for a Puppet hostgroup with the required directories
# and branches.
#
# Nacho Barrientos <nacho.barrientos@cern.ch>

function usage {
  echo "Usage:"
  echo "$0 -h HOSTGROUP_NAME -r URL"
  echo "   -h Top-level hostgroup name"
  echo "   -r URL to an empty Git repository where the module will be stored"
  echo "   -v Verbose"
  echo -n "Example: $0 -h castor -r "
  echo "https://:@git.cern.ch/kerberos/it-puppet-hostgroup-castor"
  exit 1
}

function dieiffail {
  [[ $? == 0 ]] || die $1 $2
}

function die {
    echo "$1" >&2
    [[ -z $2 ]] && exit -1
    exit $2
}

function debug {
  [[ $VERBOSE == "VERBOSE" ]] && echo $1
}

while getopts "h:r:v" opt; do
  case $opt in
    h)
      HOSTGROUP_NAME=$OPTARG
    ;;
    r)
      REPOSITORY_URL=$OPTARG
    ;;
    v)
      VERBOSE="VERBOSE"
    ;;
    \?)
      usage
    ;;
  esac
done

[[ -z $HOSTGROUP_NAME ]] && usage
[[ -z $REPOSITORY_URL ]] && usage

HOSTGROUP_NAME=$(echo $HOSTGROUP_NAME | tr '[A-Z]' '[a-z]')
REPOSITORY_NAME="it-puppet-hostgroup-$HOSTGROUP_NAME"

echo -n "Creating base structure for top-level hostgroup"
echo " '$HOSTGROUP_NAME' in directory '$REPOSITORY_NAME'"

[[ -e $REPOSITORY_NAME ]] && die "Directory $REPOSITORY_NAME already exists"

GIT_NAME=$(git config --get user.name)
[[ -z $GIT_NAME ]] && die "Git user.name not set (man git-config)"
GIT_EMAIL=$(git config --get user.email)
[[ -z $GIT_EMAIL ]] && die "Git user.email not set (man git-config)"

# Create essential directories
debug "Creating directories..."
mkdir -p $REPOSITORY_NAME/code/templates
mkdir -p $REPOSITORY_NAME/code/manifests
mkdir -p $REPOSITORY_NAME/data/hostgroup
mkdir -p $REPOSITORY_NAME/data/fqdns

# Add some placeholders and templates
debug "Adding examples..."
echo "Hostgroup '$HOSTGROUP_NAME'" > $REPOSITORY_NAME/code/README.md
cat << EOF > $REPOSITORY_NAME/code/manifests/init.pp
class hg_$HOSTGROUP_NAME {
}
EOF
cat << EOF > $REPOSITORY_NAME/data/hostgroup/$HOSTGROUP_NAME.yaml
---
foo:bar
EOF
cat << EOF > $REPOSITORY_NAME/data/fqdns/$HOSTGROUP_NAME-node1.cern.ch.yaml
---
foo:bar
EOF
cat << EOF > $REPOSITORY_NAME/code/templates/example.erb
<% if @myvar %>
myvar has <%= @myvar %> value
<% end %>
EOF

debug "Inializing Git repository and mandatory branches..."
cd $REPOSITORY_NAME
git init &> /dev/null
dieiffail "Git init failed" 10
git add * &> /dev/null
dieiffail "Git add failed" 11
git commit -m "Initial commit (generated by $0)" &> /dev/null
dieiffail "Git commit failed" 12
git remote add origin $REPOSITORY_URL &> /dev/null
dieiffail "Git remote add failed" 13
debug "Pushing master branch..."
git push origin master &> /dev/null
dieiffail "Git push (master) failed" 14
git checkout -b testing &> /dev/null
dieiffail "Git checkout (testing) failed" 15
debug "Pushing testing branch..."
git push origin testing &> /dev/null
dieiffail "Git push (testing) failed" 16
git branch testing --set-upstream origin/testing &> /dev/null
dieiffail "Git branch (--set-upstream) failed" 17
cd - &> /dev/null
echo "Done"
