#!/usr/bin/python
# CERN
# IT Department
# Nacho Barrientos <nacho.barrientos@cern.ch>
# March 2013

import sys
import httplib
import json
import urllib
import argparse
import datetime

def enum(**enums):
    return type('Enum', (), enums)

ChangeTypes = enum(F=1, B=2, C=3)

ChangeTypesMapping = {'feature': ChangeTypes.F,
    'bugfix': ChangeTypes.B,
    'critical': ChangeTypes.C}

TimeWindows = {
    ChangeTypes.F: {'m': 1440, 'M': 10080},
    ChangeTypes.B: {'m': 720, 'M': 1440},
    ChangeTypes.C: {'m': 10, 'M': 60}}

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--cert', type=str, required=True,
        help="User certificate path")
    parser.add_argument('--key', type=str, required=True, 
        help="User certificate key")
    parser.add_argument('--module', type=str, required=True, 
        help="Concerned module name")
    parser.add_argument('--changetype', type=str, default="feature",
        choices=ChangeTypesMapping.keys(),
        help="Change type")
    return parser.parse_args()

def get_toplevel_hgs_count(conn):
    print "Getting count of top-level hostgroups..."
    headers = {"Accept": "application/json"}
    conn.request("GET", "/v2/facts/hostgroup_0", None, headers)
    res = conn.getresponse()

    if res.status == httplib.OK:
        output = json.loads(res.read())
        toplevel = map(lambda x: x['value'], output)
        count = len(set(toplevel))
        print "%s found" % count
        return count
    else:
        raise Exception()

def get_toplevel_affected_hgs_count(conn, modulename):
    print "Getting count of top-level hostgroups using module '%s'..." % modulename
    modulename = "%s%s" % (modulename[0].upper(), modulename[1:].lower())

    query = """
["and",["=","name","hostgroup_0"], 
["in","certname",["extract","certname", 
["select-resources", ["and",["=", "type", "Class"], 
["=","title","%s"]]]]]]
""" % modulename

    params = {'query': query}
    headers = {"Accept": "application/json",
        "Content-type": "application/x-www-form-urlencoded"}

    conn.request("GET", "/v2/facts", urllib.urlencode(params), headers)
    res = conn.getresponse()
    if res.status == httplib.OK:
        output = json.loads(res.read())
        toplevel = map(lambda x: x['value'], output)
        count = len(set(toplevel))
        print "%s found" % count
        return count
    else:
        raise Exception()

def main():
    args = parse_args()
    conn = httplib.HTTPSConnection(host="judy.cern.ch",
        port="8081",
        key_file=args.key,
        cert_file=args.cert)

    print "Calculating due date for a '%s' change for module '%s'" % \
        (args.changetype, args.module)

    try:
        toplevel_hostgroups = get_toplevel_hgs_count(conn)
        toplevel_affected_hostgroups = \
            get_toplevel_affected_hgs_count(conn, args.module)
    except:
        sys.stderr.write("Failed to get data from Puppet DB")
        sys.exit(1)

    percentage_affected_hostgroups = \
        float(toplevel_affected_hostgroups)/toplevel_hostgroups

    print "Percentage of affected top-level hostgroups = %f" % percentage_affected_hostgroups

    now = datetime.datetime.now()
    window = TimeWindows[ChangeTypesMapping[args.changetype]]
    lower_bound = window['m']
    upper_bound = window['M']

    print "[*] Now: %s" % now.strftime("%d/%m/%y %H:%M")
    basetime = now + datetime.timedelta(minutes=lower_bound)
    print "[*] Lower bound: %s" % basetime.strftime("%d/%m/%y %H:%M")
    latesttime = now + datetime.timedelta(minutes=lower_bound+upper_bound)
    print "[*] Upper bound: %s" % latesttime.strftime("%d/%m/%y %H:%M")

    minutes_offset = lower_bound + int( percentage_affected_hostgroups * \
        (upper_bound - lower_bound))
    duetime = basetime + datetime.timedelta(minutes=minutes_offset)

    print "[*] Due date: %s" % duetime.strftime("%d/%m/%y %H:%M")

if __name__ == "__main__":
    main()
    sys.exit(0)
