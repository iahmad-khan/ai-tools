#!/usr/bin/env python
# Wrapper making hiera-cli a bit more friendly
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>

# Exit codes:
#   0 all operations succeeded
#  10 Foreman registration failed
#  20 Hiera lookup failed

import sys
import logging
import argparse
import argcomplete
import socket


from argcomplete.completers import FilesCompleter

from aitools.foreman import ForemanClient
from aitools.hiera import HieraClient
from aitools.pdb import PdbClient

from aitools.hiera import DEFAULT_HIERA_CONF_PATH

from aitools.config import ForemanConfig, PdbConfig
from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment
from aitools.common import validate_fqdn

from aitools.errors import AiToolsInitError, AiToolsForemanError
from aitools.errors import AiToolsHieraError, AiToolsPdbNotFoundError
from aitools.errors import AiToolsPdbError, AiToolsHieraKeyNotFoundError

from aitools.completer import ForemanCompleter

def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()
    ##
    ## Internal options
    ##
    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-n', '--node', type=str,
        default=socket.getfqdn(),
        help="Node to base the resolution of the environment on"
        ).completer = ForemanCompleter()

    ##
    ## Hiera options
    ##
    lookup_mode = parser.add_mutually_exclusive_group()
    lookup_mode.add_argument('-a', '--array',
        action="store_true",
        help="Do the lookup in array mode")
    lookup_mode.add_argument('-s', '--hash',
        action="store_true",
        help="Do the lookup in hash mode")
    parser.add_argument('-t', '--trace',
        action="store_true",
        help="Prints out how the hierarchy is traversed")
    parser.add_argument('-m', '--module', type=str,
        default=None, help="Add also a module to the mix")
    parser.add_argument('--hiera-config', type=str,
        help="Hiera configuration file (default: %s)" % DEFAULT_HIERA_CONF_PATH,
        default=DEFAULT_HIERA_CONF_PATH
        ).completer = FilesCompleter(directories=False)
    ##
    ## Foreman options
    ##
    foreman_config = ForemanConfig()
    foreman_config.add_standard_args(parser)
    parser.add_argument('--foreman-environment', type=str,
        default=None, help="Override Foreman environment"
        ).completer = ForemanCompleter(model='environments')
    parser.add_argument('--foreman-hostgroup', type=str,
        default=None, help="Override Foreman hostgroup"
        ).completer = ForemanCompleter(model='hostgroups',item='title')

    ##
    ## Foreman options
    ##
    pdb_config = PdbConfig()
    pdb_config.add_standard_args(parser)

    ##
    ## Positional
    ##
    parser.add_argument('key', nargs='+', default=None,
        help="Hiera keys to be looked up")
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    return args

def print_summary(args, fqdn):
    logging.info("Starting resolution in the context of host '%s'..." % fqdn)
    if args.foreman_hostgroup:
        logging.info("Foreman hostgroup forced to: %s" % args.foreman_hostgroup)
    if args.foreman_environment:
        logging.info("Foreman environment forced to: %s" % args.foreman_environment)

def main():
    """Application entrypoint"""
    args = parse_cmdline_args()
    fconfig = ForemanConfig()
    fconfig.read_config_and_override_with_pargs(args)
    pdbconfig = PdbConfig()
    pdbconfig.read_config_and_override_with_pargs(args)

    configure_logging(args)

    try:
        verify_kerberos_environment()
    except AiToolsInitError, error:
        logging.error("TGT not found or expired. Exiting...")
        return 4

    fqdn = socket.getfqdn(args.node)

    if not validate_fqdn(fqdn):
        logging.error("FQDN '%s' is not valid. See RFC 1123." % fqdn)
        return 5

    print_summary(args, fqdn)

    foreman = ForemanClient(dryrun=False, deref_alias=args.dereference_alias)
    pdb = PdbClient()

    try:
        host = foreman.gethost(fqdn=fqdn,
            toexpand=['environment', 'hostgroup'])
        # Resolve environment
        if not args.foreman_environment:
            if host['environment']:
                environment = host['environment']['name']
            else:
                logging.error("Environment not found in Foreman and not manually set")
        else:
            environment = args.foreman_environment
        logging.info("Environment: %s" % environment)
        # Resolve hostgroup
        if not args.foreman_hostgroup:
            if host['hostgroup']:
                hostgroup = host['hostgroup']['title']
            else:
                logging.error("Hostgroup not found in Foreman and not manually set")
        else:
            hostgroup = args.foreman_hostgroup
        logging.info("Hostgroup: %s" % hostgroup)
        logging.info("Getting facts from PuppetDB...")
        facts = {}
        try:
            facts = pdb.get_facts(hostname=fqdn)
        except AiToolsPdbNotFoundError:
            logging.warn("Host not found in PDB, some parts of the hierarchy "
                "won't be explored")
        except AiToolsPdbError:
            logging.warn("PDB is not available, some parts of the hierarchy "
                "won't be explored")
    except AiToolsForemanError, error:
        logging.error("Couldn't fetch Foreman entry (%s)" % error)
        return 10

    hiera = HieraClient(args.hiera_config, args.trace, args.hash, args.array)

    try:
        for key in args.key:
            logging.info("Looking up '%s'..." % key)
            sys.stdout.write(hiera.lookupkey(key, fqdn, environment,
                hostgroup, facts, args.module))
    except AiToolsHieraKeyNotFoundError, error:
        logging.info(error)
    except AiToolsHieraError, error:
        logging.error("Lookup failed (%s)" % error)
        return 20

    return 0

if __name__ == '__main__':
    sys.exit(main())
