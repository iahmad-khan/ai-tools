#!/usr/bin/python

from argparse import ArgumentParser
import argcomplete
import sys
import signal

from aitools.rundeck import RundeckClient
from aitools.config import RundeckConfig, AiConfig
from aitools.common import configure_logging
from aitools.errors import AiToolsRundeckError

def signal_handler(signal, frame):
    print('Output streaming terminated.')
    sys.exit(0)

def rename(pargs):
    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)
    try:
        client = RundeckClient(show_url=pargs.show_url, dryrun=pargs.dryrun, deref_alias=pargs.dereference_alias)
        execution = client.run_job(job='rename',oldHostname=pargs.oldhostname, newHostname=pargs.newhostname)
        sys.stdout.write("Job executed succesfully.\n")
        sys.stdout.write("You can safely terminate this process"
            " and follow the execution at: %s\n" % execution['href'])
        client.show_execution(execution['id'], execution['jobid'])
    except AiToolsRundeckError as e:
        sys.stderr.write(str(e))
        sys.exit(3)


def main():
    signal.signal(signal.SIGINT, signal_handler)
    parser = ArgumentParser(description="Tool for renaming physical hosts")
    rundeck_config = RundeckConfig()
    rundeck_config.add_standard_args(parser)

    parser.add_argument("oldhostname", metavar="OLDHOST",
                    help="The machine to be renamed")
    parser.add_argument("newhostname", metavar="NEWHOST",
                    help="The new name of the machine")
    parser.add_argument("--show_url", action="store_true", default=False, dest="show_url",
                    help="show REST urls")
    parser.add_argument('-v', '--verbose',
                        action="store_true", help="Be chatty")
    parser.add_argument('-d', '--dryrun',
                        action="store_true", help="Don't do the requests that alter data")
    parser.set_defaults(func=rename)
    argcomplete.autocomplete(parser)
    pargs = parser.parse_args()
    pargs.func(pargs)


if __name__ == "__main__":
    main()
