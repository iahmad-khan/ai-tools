#!/usr/bin/env python
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>

# Exit codes:
#  0 all operations succeeded
#  2 bad command line
#  4 Kerberos TGT not found or expired

import os
import sys
import logging
import argparse
import json
import yaml
import re
import smtplib
import datetime
import dateutil.parser
from string import Template
from email.mime.text import MIMEText

from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment
from aitools.config import ForemanConfig
from aitools.foreman import ForemanClient
from aitools.errors import AiToolsError
from aitools.errors import AiToolsInitError, AiToolsForemanError

DEFAULT_ENVIRONMENTS_PATH = "/mnt/puppetnfsdir/metadata/environments"
ENVIRONMENTS_BLACKLIST = ['production.yaml', 'qa.yaml']

class AiEnvironmentsReminderError(AiToolsError):
    pass

def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-d', '--dryrun',
        action="store_true",
        help="Do not send emails")
    foreman_config = ForemanConfig()
    foreman_config.add_standard_args(parser)
    parser.add_argument('-e', '--environments', type=str,
        default=DEFAULT_ENVIRONMENTS_PATH,
        help="Clone of it-puppet-environments")
    args = parser.parse_args()
    return args

def send_email_environment_empty(environment, addr):
    subject = "Information about your environment '%s'" % environment
    template = Template("""Hi,

We believe that the Puppet environment '$environment' is not being 
used, given that according to Foreman it has no hosts associated to it.

Unused environments (especially snapshots) waste space in the Puppet
masters and make the sync process slower, introducing unnecessary
delays between new code is pushed and the changes are visible by 
the Puppet masters (affecting not just you, but all AI users).

If you don't need the environment anymore (because for instance you're 
done developing your new feature or your bugfix) please get rid of 
it by following this procedure:

    http://cern.ch/go/8mcT

Thanks!

AI config team <ai-config-team@cern.ch>.""")
    logging.info("Sending email about environment '%s' to '%s'" % \
        (environment, addr))
    body = template.substitute(environment=environment)
    send_email(subject, addr, None, body)

def send_email(subject, to_addr, cc_addr, body):
    try:
        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = "noreply@cern.ch"
        msg['To'] = to_addr
        if cc_addr is not None:
            msg['CC'] = cc_addr
        server = smtplib.SMTP('localhost')
        server.sendmail("noreply@cern.ch", (to_addr,), msg.as_string())
        logging.debug("Email sent to %s" % to_addr)
    except smtplib.SMTPException, error:
        raise AiEnvironmentsReminderError("Failed to send mail to '%s' (%s)" %
            (to_addr, error))

def read_environment_definition(environment):
    try:
        path = args.environments + "/%s" % environment
        logging.debug("Reading environment from %s" % path)
        return yaml.load(open(path, 'r'))
    except yaml.YAMLError:
        raise AiEnvironmentsReminderError("Unable to parse %s" % path)
    except IOError:
        raise AiEnvironmentsReminderError("Unable to open %s for reading" % path)

def process_environments():
    environment_files = os.listdir(args.environments)
    environment_files = filter(lambda x: re.match(".+?.yaml$", x),
        environment_files)
    environment_files = filter(lambda x: x not in ENVIRONMENTS_BLACKLIST,
        environment_files)
    foreman = ForemanClient(dryrun=args.dryrun, deref_alias=args.dereference_alias)
    for environment_file in environment_files:
        logging.info("Processing '%s'..." % environment_file)

        try:
            environment = read_environment_definition(environment_file)
        except AiEnvironmentsReminderError, error:
            logging.error(error)
            continue

        environment['name'] = re.sub(".yaml$", "", environment_file)

        try:
            foreman_environment = foreman.get_environment_by_name(environment['name'])
            logging.debug("Found Foreman environment '%s'..." %
                foreman_environment['name'])
        except AiToolsForemanError, error:
            logging.error(error)
            continue

        notify(environment, foreman_environment)

def notify(environment, foreman_environment):
    logging.info("Environment '%s' has %d hosts" %
        (environment['name'], foreman_environment['hosts_count']))

    created = dateutil.parser.parse(foreman_environment['created_at'])
    created = created.replace(tzinfo=None)
    threshold = datetime.datetime.now() - datetime.timedelta(days=1)
    if foreman_environment['hosts_count'] == 0 and created < threshold:
        if not args.dryrun:
            send_email_environment_empty(environment['name'],
             environment['notifications'])
        else:
            logging.info("Email to %s not sent because dryrun flag is on" \
              % environment['notifications'])

def main():
    """Application entrypoint"""
    global args
    args = parse_cmdline_args()
    fconfig = ForemanConfig()
    fconfig.read_config_and_override_with_pargs(args)

    configure_logging(args)

    try:
        os.stat(args.environments)
        if not os.path.isdir(args.environments):
            raise OSError()
    except OSError:
        logging.error("'%s' is not readable or not a directory. Exiting...")
        return 2

    try:
        verify_kerberos_environment()
    except AiToolsInitError, error:
        logging.error("TGT not found or expired. Exiting...")
        return 4

    process_environments()
    return 0

if __name__ == '__main__':
    sys.exit(main())
