#!/usr/bin/env python
# This program helps to kill a puppet-managed
# Foreman-enabled Openstack VM
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>
#

# Exit codes:
#   0 all operations succeeded
#   2 bad command line
#   3 bad user environment
#   4 Kerberos TGT not found or expired
#  10 Nova deletion request failed
#  20 Foreman delete operation failed
#  30 Openstack authorization error

import os
import glob
import sys
import logging
import argparse
import argcomplete
from aitools.config import ForemanConfig, NovaConfig, RogerConfig

from aitools.foreman import ForemanClient
from aitools.completer import ForemanCompleter
from aitools.nova import NovaClient
from aitools.roger import RogerClient
from aitools.openstack_auth_client import OpenstackAuthClient
from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment
from aitools.common import get_openstack_environment
from aitools.common import validate_fqdn
from aitools.common import append_domain

from aitools.errors import AiToolsInitError, AiToolsForemanError
from aitools.errors import AiToolsNovaError, AiToolsOpenstackAuthError
from aitools.errors import AiToolsRogerNotAllowedError, AiToolsRogerNotFoundError


def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()
    ##
    ## Internal options
    ##
    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-d', '--dryrun',
        action="store_true",
        help="Don't do the requests that alter data")
    ##
    ## Nova options
    ##
    nova_config = NovaConfig()
    nova_config.add_standard_args(parser)
    parser.add_argument('--nova-disable', action="store_true",
        help="Disable Nova actions")

    ##
    ## Roger options
    ##
    roger_config = RogerConfig()
    roger_config.add_standard_args(parser)
    parser.add_argument('--roger-disable', action="store_true",
        help="Disable Roger actions")

    ##
    ## Foreman options
    ##
    foreman_config = ForemanConfig()
    foreman_config.add_standard_args(parser)
    parser.add_argument('hostname', nargs=1, default=None,
        help="Hostname (qualified or not)").completer = ForemanCompleter()
    parser.add_argument('--foreman-disable', action="store_true",
        help="Disable Foreman actions")
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    return args

def main():
    """Application entrypoint"""
    try:
        args = parse_cmdline_args()
    except AiToolsInitError, error:
        sys.stdout.write("Wrong command line arguments (%s)\n" % error)
        return 2

    fconfig = ForemanConfig()
    fconfig.read_config_and_override_with_pargs(args)

    configure_logging(args)

    try:
        openstack_env = get_openstack_environment()
    except AiToolsInitError, error:
        logging.error(error)
        return 3

    try:
        verify_kerberos_environment()
    except AiToolsInitError, error:
        logging.error("TGT not found or expired. Exiting...")
        return 4

    fqdn = append_domain(args.hostname[0])

    if not validate_fqdn(fqdn):
        logging.error("FQDN '%s' is not valid. See RFC 1123." % fqdn)
        return 5

    if not args.nova_disable:
        try:
            auth_client = OpenstackAuthClient(openstack_env)
            nova = NovaClient(auth_client, dryrun=args.dryrun)
            nova.delete(fqdn)
        except AiToolsNovaError, error:
            logging.error("Couldn't delete VM from Openstack (errormsg: %s)" % error)
            logging.info("* If the machine was not found, then you're probably in the wrong")
            logging.info("  project. What about eval $(ai-rc --same-project-as %s)?"
                % args.hostname[0])
            logging.info("* OTOH, if your machine is a physical machine ai-kill-vm is")
            logging.info("  probably not the correct tool to use.")
            logging.info("* OTOOH, if you're sure that the VM does not exist anymore")
            logging.info("  then you can skip this step by adding --nova-disable")
            logging.info("  in order to continue with the remaining steps.")
  
            return 10
        except AiToolsOpenstackAuthError, error:
            logging.error("Not authorized to delete '%s' (%s)." % (args.hostname[0], error))
            return 30

    if not args.roger_disable:
        roger_client = RogerClient(deref_alias=args.dereference_alias)
        # we need to turn off alarms
        try:
            state = roger_client.update_or_create_state(fqdn, appstate="disabled", nc_alarmed="false",
                                       hw_alarmed="false", app_alarmed="false", os_alarmed="false",
                                       message="alarms disabled by ai-kill-vm")
        except AiToolsRogerNotAllowedError, error:
            logging.error("Couldn't switch off Roger alarms, not authorized (%s)" % error)
        except AiToolsRogerNotFoundError, error:
            logging.error("Couldn't find Roger entry to switch off alarms (%s)" % error)
        except Exception, error:
            logging.error("Received unexpected error trying to switch off alarms in roger: %s" % error)
            logging.info("Please update roger for machine to switch alarms off if necessary")

    if not args.foreman_disable:
        try:
            foreman = ForemanClient(dryrun=args.dryrun, deref_alias=args.dereference_alias)
            foreman.delhost(fqdn)
        except AiToolsForemanError, error:
            logging.error("Couldn't delete Foreman entry (%s)." % error)
            return 20

    return 0

if __name__ == '__main__':
    sys.exit(main())
