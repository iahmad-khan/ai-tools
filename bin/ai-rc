#!/usr/bin/python

# This program helps setting the appropiate environment variables
# to interact with the OpenStack Service.
# Authors:
#  Alberto Rodriguez Peon <alberto.rodriguez.peon@cern.ch>

# Exit codes:
#   0 all operations succeeded
#   1 Host not found in DNS
#   3 Host doesn't have "cern_os_tenant" fact in PuppetDB

import logging
import sys
from os import environ

from argparse import ArgumentParser
from argcomplete import autocomplete
from getpass import getuser

from aitools.errors import AiToolsPdbError
from aitools.common import append_domain, configure_logging, fqdnify
from aitools.config import AiConfig, PdbConfig
from aitools.pdb import PdbClient

ENV_TO_UNSET = ['OS_PROJECT_ID', 'OS_TENANT_ID', 'OS_TENANT_NAME']

STDOUT_FORMAT = {
    'bash': ("unset %s;", 'export %s="%s";'),
    'tcsh': ("unsetenv %s;", 'setenv %s "%s";'),
    'csh': ("unsetenv %s;", 'setenv %s "%s";')
}

def parse_cmd_args():
    parser = ArgumentParser(description="Set OpenStack project variables "
                                        "based on a single host")
    pdb_config = PdbConfig()
    pdb_config.add_standard_args(parser)
    options = parser.add_mutually_exclusive_group()
    options.add_argument('-s', '--same-project-as', type=str, metavar="HOST",
                        help="Hostname to get the OS Project variables from")
    options.add_argument("project", nargs='?', metavar="OS_PROJECT",
                        help="OpenStack project name")
    shells = parser.add_mutually_exclusive_group(required=False)
    shells.add_argument('-c', '--cshell', action="store_const",
                        dest='shell', const='tcsh',
                        help="Generate C-shell commands on stdout")
    shells.add_argument('-b', '--bshell', action="store_const",
                        dest='shell', const='bash',
                        help="Generate Bourne shell commands on stdout")
    shells.set_defaults(shell=None)

    parser.add_argument('-v', '--verbose', action="store_true",
                        help="Verbose output")
    autocomplete(parser)
    args = parser.parse_args()
    return args

def print_env_variables(project_name=None, shell=None):
    project_name = project_name or "Personal %s" % getuser()

    if shell and '/' in shell:
        shell = shell.split('/')[-1]
    if not shell or not shell in STDOUT_FORMAT:
        shell = 'bash'

    unsetenv, setenv = STDOUT_FORMAT[shell]

    # First unset potentially clashing variables
    for name in ENV_TO_UNSET:
        print unsetenv % name
    print setenv % ('OS_PROJECT_NAME', project_name)

    logging.info("OpenStack environment variables set for Project = '%s'"
                 "" % project_name)

def main():
    args = parse_cmd_args()
    configure_logging(args)
    config = AiConfig()
    config.read_config_and_override_with_pargs(args)

    host = args.same_project_as
    project_name = args.project
    if host:
        fqdn_host = fqdnify(host)
        if not fqdn_host:
            logging.error("Host '%s' not found in DNS" % host)
            sys.exit(1)

        if fqdn_host != append_domain(host):
            logging.debug("'%s' is an alias for '%s', "
                          "attempting to continue..." % (host, fqdn_host))

        try:
            pdb = PdbClient(deref_alias=config.dereference_alias)
            project_name = pdb.get_facts(fqdn_host, 'cern_os_tenant')['cern_os_tenant']
        except AiToolsPdbError as error:
            logging.error(error)
            sys.exit(3)

    print_env_variables(project_name, shell=args.shell or environ.get('SHELL'))
    sys.exit(0)

if __name__ == "__main__":
    main()
