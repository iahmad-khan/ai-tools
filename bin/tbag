#!/usr/bin/python

from argparse import ArgumentParser
import re
import argcomplete

from urllib import urlencode
from aitools.errors import AiToolsTrustedBagError

try:
    import simplejson as json
except ImportError:
    import json
import logging
import sys
from aitools.trustedbag import TrustedBagClient
from aitools.config import TrustedBagConfig, AiConfig, PdbConfig
from aitools.pdb import PdbClient
from aitools.completer import ForemanCompleter
from aitools.common import fqdnify
from aitools.common import configure_logging
import base64

logger = logging.getLogger(__name__)


def extract_entity(pargs):
    # mutual exclusion already handled by argparse
    if pargs.host:
        host = pargs.host
        fqdn = fqdnify(host)
        if fqdn:
            entity = fqdn
        else:
            entity = host
            logger.warning("Could not resolve '%s', attempting to continue" % host)
        scope = 'host'
    elif pargs.hostgroup:
        entity = pargs.hostgroup
        scope = 'hostgroup'
    else:
        parser.error('Either --host or --hg must be specified.')
    return (entity, scope)


def set_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    if not re.match("^[\w\-\.]+$", pargs.key):
        logger.fatal("Invalid secret key. Must match normal word characters ('^[\w\.\-]+$\)")
        sys.exit(2)
    value = None
    if pargs.file:
        try:
            fh = open(pargs.file)
        except IOError, e:
            logger.fatal("Could not open file '%s': '%s'" % (pargs.file, e))
            sys.exit(2)
        value = fh.read()
    else:
        value = raw_input("Enter Secret: ")

    if pargs.binary:
        value = base64.b64encode(value)
    else:
        try:
            _ = json.dumps(value)
        except UnicodeDecodeError:
            logger.info("supplied secret doesn't encode, maybe it's binary?\n" +
                        "encoding as base64")
            value = base64.b64encode(value)
            pargs.binary = True

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun, deref_alias=pargs.dereference_alias)
        tbag.add_key(entity, scope, pargs.key, value, b64_value=pargs.binary)
        logging.info("Key '%s' successfully added to %s '%s'" % (pargs.key, scope, entity))
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)


def delete_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun, deref_alias=pargs.dereference_alias)
        tbag.delete_key(entity, scope, pargs.key)
        logging.info("Key '%s' successfully deleted from %s '%s'" % (pargs.key, scope, entity))
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)


def show_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun, deref_alias=pargs.dereference_alias)
        secret = tbag.get_key(entity, scope, pargs.key)
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)

    if pargs.file:
        try:
            fh = open(pargs.file, 'wb')
        except IOError, e:
            logger.fatal("Couldn't open '%s' for writing: '%s'" % (pargs.file, e))
            sys.exit(2)
        try:
            fh.write(secret["secret"])
        except IOError, e:
            logger.fatal("Failed to write to '%s': '%s'" % (pargs.file, e))
            sys.exit(2)
        secret["secret"] = "Printed to '%s'" % pargs.file
    else:
        if secret["encoding"] == 'b64':
            logger.error("Secret is binary so cowardly refusing to ruin your console... try --file")
            secret["secret"] = "removed as binary, use --file"
    print json.dumps(secret, sort_keys=True, indent=5, separators=(',', ': '))


def showkeys_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun, deref_alias=pargs.dereference_alias)

    rtn = dict()

    try:
        thislevel_keys = tbag.get_keys(entity, scope)
        for k in thislevel_keys["secrets"]:
            rtn[k] = {scope: [entity]}
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)

    if not pargs.show_tree:
        print json.dumps(thislevel_keys["secrets"], sort_keys=True, indent=5, separators=(',', ': '))
        sys.exit(0)

    if scope == "hostgroup":
        hg = entity
    else:
        pdb_client = PdbClient(deref_alias=pargs.dereference_alias)
        facts = pdb_client.get_facts(entity)
        hg = facts["hostgroup"]
    hg_elems = hg.split("/")
    while hg_elems:
        hostgroup = "/".join(hg_elems)
        try:
            hg_keys = tbag.get_keys(hostgroup, "hostgroup")
            for k in hg_keys["secrets"]:
                if pargs.show_all:
                    if k in rtn:
                        if "hostgroup" in rtn[k]:
                            rtn[k]["hostgroup"].append(hostgroup)
                        else:
                            rtn[k]["hostgroup"] = [hostgroup]
                    else:
                        rtn[k] = {"hostgroup": [hostgroup]}
                else:
                    if k in rtn:
                        pass
                    else:
                        rtn[k] = {"hostgroup": [hostgroup]}
        except AiToolsTrustedBagError as e:
            logging.error(e)
            sys.exit(2)
        hg_elems.pop()
    print json.dumps(rtn, sort_keys=True, indent=5, separators=(',', ': '))


def main():

    global parser # weeeeellll....
    parser = ArgumentParser(description="Tool for secrets handling")

    tbag_config = TrustedBagConfig()
    tbag_config.add_standard_args(parser)
    pdb_config = PdbConfig()
    pdb_config.add_standard_args(parser)

    subparsers = parser.add_subparsers()

    set_parser = subparsers.add_parser("set", help="Set a secret in the store")
    ahhg = set_parser.add_mutually_exclusive_group()
    ahhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to add to").completer = ForemanCompleter()
    ahhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to add to")
    set_parser.add_argument('--file', metavar="FILENAME", help="read secret blob from file")
    set_parser.add_argument('--binary', action="store_true", default=False, help="force secret (presumably file) to be treated as binary")
    set_parser.add_argument("key", metavar="KEY", help="Name of the key to set")
    set_parser.set_defaults(func=set_main)


    delete_parser = subparsers.add_parser("delete", help="Delete a secret from the store")
    dhhg = delete_parser.add_mutually_exclusive_group()
    dhhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to delete from").completer = ForemanCompleter()
    dhhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to delete from")
    delete_parser.add_argument("key", metavar="KEY", help="Name of the key to delete")
    delete_parser.set_defaults(func=delete_main)


    show_parser = subparsers.add_parser("show", help="Show a secret from the store")
    shhg = show_parser.add_mutually_exclusive_group()
    shhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to query").completer = ForemanCompleter()
    shhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to query")
    show_parser.add_argument('--file', metavar="FILENAME", help="write secret blob to file")
    show_parser.add_argument("key", metavar="KEY", help="Name of the key to show")
    show_parser.set_defaults(func=show_main)


    showkeys_parser = subparsers.add_parser("showkeys", help="Show all keys for the given host or hostgroup")
    showkeys_parser.add_argument("--tree", action="store_true", default=False, dest="show_tree",
                                 help="show the keys in the tree for the given host or hostgroup")
    showkeys_parser.add_argument('--all', action="store_true", default=False, dest="show_all",
                                 help="show all keys in the tree even if masked by more specific members of the hierarchy")
    skhhg = showkeys_parser.add_mutually_exclusive_group()
    skhhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to query").completer = ForemanCompleter()
    skhhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to query")
    showkeys_parser.set_defaults(func=showkeys_main)

    parser.add_argument("--show_url", action="store_true", default=False, dest="show_url",
                    help="show REST urls")
    parser.add_argument('-v', '--verbose',
                        action="store_true", help="Be chatty")
    parser.add_argument('-d', '--dryrun',
                        action="store_true", help="Don't do the requests that alter data")

    argcomplete.autocomplete(parser)

    pargs = parser.parse_args()
    pargs.func(pargs)

if __name__ == "__main__":
    main()
