#!/usr/bin/python

from argparse import ArgumentParser
import os
import argcomplete

from urllib import urlencode
from aitools.errors import AiToolsTrustedBagError

try:
    import simplejson as json
except ImportError:
    import json
import logging
import sys
from aitools.trustedbag import TrustedBagClient
from aitools.config import TrustedBagConfig, AiConfig
from aitools.completer import ForemanCompleter
from aitools.common import fqdnify
from aitools.common import configure_logging
import base64

logger = logging.getLogger(__name__)

def extract_entity(pargs):
    # mutual exclusion already handled by argparse
    if pargs.host:
        host = pargs.host
        entity = fqdnify(host)
        scope = 'host'
    elif pargs.hostgroup:
        entity = pargs.hostgroup
        scope = 'hostgroup'
    else:
        parser.error('Either --host or --hg must be specified.')
    return (entity, scope)

def set_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    if pargs.value and pargs.file:
        logger.fatal("Both --file and value defined for secret - choose one or the other")
        sys.exit(2)
    if not pargs.value and not pargs.file:
        logger.fatal("Please either choose --file with a secret, or add a string value")
        sys.exit(2)
    if pargs.file:
        try:
            fh = open(pargs.file)
        except IOError, e:
            logger.fatal("Could not open file '%s': '%s'" % (pargs.file, e))
            sys.exit(2)
        pargs.value = fh.read()

    if not pargs.binary:
        try:
            _ = json.dumps(pargs.value)
        except UnicodeDecodeError:
            logger.info("supplied secret doesn't encode, maybe it's binary?\n" +
                        "encoding as base64")
            pargs.binary = True

    if pargs.binary:
        pargs.value = base64.b64encode(pargs.value)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun)
        tbag.add_key(entity, scope, pargs.key, pargs.value, b64_value=pargs.binary)
        logging.info("Key '%s' successfully added to %s '%s'" % (pargs.key, scope, entity))
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)


def delete_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun)
        tbag.delete_key(entity, scope, pargs.key)
        logging.info("Key '%s' successfully deleted from %s '%s'" % (pargs.key, scope, entity))
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)


def show_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun)
        secret = tbag.get_key(entity, scope, pargs.key)
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)

    if pargs.file:
        try:
            fh = open(pargs.file, 'wb')
        except IOError, e:
            logger.fatal("Couldn't open '%s' for writing: '%s'" % (pargs.file, e))
            sys.exit(2)
        try:
            fh.write(secret["secret"])
        except IOError, e:
            logger.fatal("Failed to write to '%s': '%s'" % (pargs.file, e))
            sys.exit(2)
        secret["secret"] = "Printed to '%s'" % pargs.file
    else:
        if secret["encoding"] == 'b64':
            logger.error("Secret is binary so cowardly refusing to ruin your console... try --file")
            secret["secret"] = "removed as binary, use --file"
    print json.dumps(secret, sort_keys=True, indent=5, separators=(',', ': '))


def showkeys_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun)
        keys = tbag.get_keys(entity, scope)
        print json.dumps(keys, sort_keys=True, indent=5, separators=(',', ': '))
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)


def main():

    global parser # weeeeellll....
    parser = ArgumentParser(description="Tool for secrets handling")

    tbag_config = TrustedBagConfig()
    tbag_config.add_standard_args(parser)

    subparsers = parser.add_subparsers()

    set_parser = subparsers.add_parser("set", help="Set a secret in the store")
    ahhg = set_parser.add_mutually_exclusive_group()
    ahhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to add to").completer = ForemanCompleter()
    ahhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to add to")
    set_parser.add_argument('--file', metavar="FILENAME", help="read secret blob from file")
    set_parser.add_argument('--binary', action="store_true", default=False, help="force secret (presumably file) to be treated as binary")
    set_parser.add_argument("key", metavar="KEY", help="Name of the key to set")
    set_parser.add_argument("value", metavar="VALUE", nargs='?', help="Value to set")
    # TODO: add 'file' opt for accepting data from a file
    set_parser.set_defaults(func=set_main)


    delete_parser = subparsers.add_parser("delete", help="Delete a secret from the store")
    dhhg = delete_parser.add_mutually_exclusive_group()
    dhhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to delete from").completer = ForemanCompleter()
    dhhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to delete from")
    delete_parser.add_argument("key", metavar="KEY", help="Name of the key to delete")
    delete_parser.set_defaults(func=delete_main)


    show_parser = subparsers.add_parser("show", help="Show a secret from the store")
    shhg = show_parser.add_mutually_exclusive_group()
    shhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to query").completer = ForemanCompleter()
    shhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to query")
    show_parser.add_argument('--file', metavar="FILENAME", help="write secret blob to file")
    show_parser.add_argument('--force', help="force potentially terminal breaking secret to be printed")
    show_parser.add_argument("key", metavar="KEY", help="Name of the key to show")
    show_parser.set_defaults(func=show_main)


    showkeys_parser = subparsers.add_parser("showkeys", help="Show all keys for the given host or hostgroup")
    skhhg = showkeys_parser.add_mutually_exclusive_group()
    skhhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to query").completer = ForemanCompleter()
    skhhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to query")
    showkeys_parser.set_defaults(func=showkeys_main)

    parser.add_argument("--show_url", action="store_true", default=False, dest="show_url",
                    help="show REST urls")
    parser.add_argument('-v', '--verbose',
                        action="store_true", help="Be chatty")
    parser.add_argument('-d', '--dryrun',
                        action="store_true", help="Don't do the requests that alter data")

    argcomplete.autocomplete(parser)

    pargs = parser.parse_args()
    pargs.func(pargs)

if __name__ == "__main__":
    main()
