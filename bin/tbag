#!/usr/bin/python

from argparse import ArgumentParser
import os
import argcomplete

from urllib import urlencode
from aitools.errors import AiToolsTrustedBagError

try:
    import simplejson as json
except ImportError:
    import json
import logging
import sys
from aitools.trustedbag import TrustedBagClient
from aitools.config import TrustedBagConfig, AiConfig
from aitools.completer import ForemanCompleter
from aitools.common import fqdnify
from aitools.common import configure_logging

logger = logging.getLogger(__name__)

def extract_entity(pargs):
    # mutual exclusion already handled by argparse
    if pargs.host:
        host = pargs.host
        entity = fqdnify(host)
        scope = 'host'
    elif pargs.hostgroup:
        entity = pargs.hostgroup
        scope = 'hostgroup'
    else:
        parser.error('Either --host or --hg must be specified.')
    return (entity, scope)

def add_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun)
        tbag.add_key(entity, scope, pargs.key, pargs.value)
        logging.info("Key '%s' successfully added to %s '%s'" % (pargs.key, scope, entity))
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)


def delete_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun)
        tbag.delete_key(entity, scope, pargs.key)
        logging.info("Key '%s' successfully deleted from %s '%s'" % (pargs.key, scope, entity))
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)


def show_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun)
        secret = tbag.get_key(entity, )
        print json.dumps(secret, sort_keys=True, indent=5, separators=(',', ': '))
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)


def showkeys_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)

    (entity, scope) = extract_entity(pargs)

    try:
        tbag = TrustedBagClient(show_url=pargs.show_url, dryrun=pargs.dryrun)
        keys = tbag.get_keys(entity, scope)
        print json.dumps(keys, sort_keys=True, indent=5, separators=(',', ': '))
    except AiToolsTrustedBagError as e:
        logging.error(e)
        sys.exit(2)


def main():

    global parser # weeeeellll....
    parser = ArgumentParser(description="Tool for secrets handling")

    tbag_config = TrustedBagConfig()
    tbag_config.add_standard_args(parser)

    subparsers = parser.add_subparsers()

    add_parser = subparsers.add_parser("add", help="Add a secret to the store")
    ahhg = add_parser.add_mutually_exclusive_group()
    ahhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to add to").completer = ForemanCompleter()
    ahhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to add to")
    add_parser.add_argument('--file', metavar="FILENAME", help="read secret blob from file")
    add_parser.add_argument("key", metavar="KEY", help="Name of the key to add")
    add_parser.add_argument("value", metavar="VALUE", help="Value to add")
    # TODO: add 'file' opt for accepting data from a file
    add_parser.set_defaults(func=add_main)


    delete_parser = subparsers.add_parser("delete", help="Delete a secret from the store")
    dhhg = delete_parser.add_mutually_exclusive_group()
    dhhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to delete from").completer = ForemanCompleter()
    dhhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to delete from")
    delete_parser.add_argument("key", metavar="KEY", help="Name of the key to delete")
    delete_parser.set_defaults(func=delete_main)


    show_parser = subparsers.add_parser("show", help="Show a secret from the store")
    shhg = show_parser.add_mutually_exclusive_group()
    shhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to query").completer = ForemanCompleter()
    shhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to query")
    show_parser.add_argument('--file', metavar="FILENAME", help="write secret blob to file")
    show_parser.add_argument("key", metavar="KEY", help="Name of the key to show")
    show_parser.set_defaults(func=show_main)


    showkeys_parser = subparsers.add_parser("show", help="Show all keys for the given host or hostgroup")
    skhhg = showkeys_parser.add_mutually_exclusive_group()
    skhhg.add_argument("--host", metavar="HOSTNAME", dest="host",
                            help="the host to query").completer = ForemanCompleter()
    skhhg.add_argument("--hg", metavar="HOSTGROUP", dest="hostgroup",
                            help="the hostgroup to query")
    showkeys_parser.set_defaults(func=showkeys_main)

    parser.add_argument("--show_url", action="store_true", default=False, dest="show_url",
                    help="show REST urls")
    parser.add_argument('-v', '--verbose',
                        action="store_true", help="Be chatty")
    parser.add_argument('-d', '--dryrun',
                        action="store_true", help="Don't do the requests that alter data")

    argcomplete.autocomplete(parser)

    pargs = parser.parse_args()
    pargs.func(pargs)

if __name__ == "__main__":
    main()
