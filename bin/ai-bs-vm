#!/usr/bin/env python
# This program helps to create a puppet-managed
# Foreman-enabled Openstack VM.
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>

# Exit codes:
#   0 all operations succeeded
#   2 bad command line
#   3 bad user environment
#   4 Kerberos TGT not found or expired
#   5 FQDN is invalid
#   6 Userdata generation failed
#   7 Userdata dump failed
#  10 Foreman registration failed
#  20 Host staging failed
#  30 Nova boot failed
#  40 Cinder volume operation failed
#  50 Openstack authorization error

import os
import sys
import logging
import argparse
import argcomplete
import re
from aitools.config import ForemanConfig, CertmgrConfig, NovaConfig, RogerConfig

from aitools.foreman import ForemanClient
from aitools.certmgr import CertmgrClient
from aitools.roger import RogerClient
from aitools.nova import NovaClient
from aitools.cinder import CinderClient
from aitools.openstack_auth_client import OpenstackAuthClient

from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment
from aitools.common import get_openstack_environment
from aitools.common import generate_random_fqdn
from aitools.common import generate_userdata
from aitools.common import validate_fqdn
from aitools.common import append_domain
from aitools.common import is_valid_UUID
from aitools.common import is_valid_size_format
from aitools.common import generator_device_names
from aitools.common import IMAGES_METADATA

from aitools.errors import AiToolsInitError, AiToolsForemanError
from aitools.errors import AiToolsCertmgrError, AiToolsNovaError
from aitools.errors import AiToolsRogerNotAllowedError, AiToolsRogerNotImplementedError
from aitools.errors import AiToolsRogerInternalServerError
from aitools.errors import AiToolsCinderError
from aitools.errors import AiToolsOpenstackAuthError

from aitools.completer import ForemanCompleter
from aitools.completer import NovaCompleter

DEFAULT_OPENSTACK_FLAVOR="m2.small"
DEFAULT_OPENSTACK_SECUTIRYGROUPS="default"

DEFAULT_FOREMAN_ENVIRONMENT = 'production'

DEFAULT_PUPPETMASTER_HOSTNAME = "it-puppet-masters-public.cern.ch"

DEFAULT_PUPPETINIT_PATH = "/usr/share/ai-tools/userdata/puppetinit"
DEFAULT_PREFIX = "vm"
DEFAULT_GROW_PARTITION = 2

VOLUME_VALIDATION_REGEX = {
    'boot_new_volume': r"^(?P<size>[1-9]\d*(TB|GB))"
        "(:(?P<dot>delete-on-terminate))?"
        "(:type=(?P<type>[\w-]+))?$",
    'boot_existing_volume': r'^(?P<uuid>[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12})(?P<dot>:delete-on-terminate)?$',
    'attach_new_volume': r"^(?P<device>\w+)=(?P<value>[1-9]\d*(TB|GB))"
        "(:(?P<dot>delete-on-terminate))?"
        "(:type=(?P<type>[\w-]+))?$",
    'attach_existing_volume': r'^(?P<device>\w+)=(?P<value>[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12})(?P<dot>:delete-on-terminate)?$'
}

ATTACHMENTS = {}

validate_arg_with_regex = lambda name, value : re.match(VOLUME_VALIDATION_REGEX[name], value, re.I)

def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()
    ##
    ## Internal options
    ##
    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-d', '--dryrun',
        action="store_true",
        help="Don't do the requests that alter data")
    parser.add_argument('--prefix', type=str,
        help="Prefix to prepend to the randomly generated hostname (default: '%s')" % \
        DEFAULT_PREFIX,
        default=os.environ.get('AIBS_VMNAME_PREFIX', DEFAULT_PREFIX))
    parser.add_argument('--puppetmaster-hostname', type=str,
        help="Hostname of the master used to fetch the configuration (default: '%s')" % \
        DEFAULT_PUPPETMASTER_HOSTNAME,
        default=os.environ.get('AIBS_PUPPETMASTER_HOSTNAME', DEFAULT_PUPPETMASTER_HOSTNAME))
    parser.add_argument('--puppetinit-path', type=str,
        help="Path to the template to generate the userdata script to init Puppet (default: '%s')" % \
        DEFAULT_PUPPETINIT_PATH,
        default=DEFAULT_PUPPETINIT_PATH)
    parser.add_argument('--userdata-dir', type=str,
        help="Path to a directory with snippets to attach to the userdata")
    parser.add_argument('--userdata-dump', type=str,
        help="Path to a file to dump the userdata")
    parser.add_argument('--landb-mainuser', type=str,
        help="LANDB main user to be assigned to the virtual machine",
        default=os.environ.get('AIBS_LANDB_MAINUSER', None))
    parser.add_argument('--landb-responsible', type=str,
        help="LANDB responsible to be assigned to the virtual machine",
        default=os.environ.get('AIBS_LANDB_RESPONSIBLE', None))
    parser.add_argument('--noreboot',
        action="store_true",
        help="Don't reboot after the Puppet initialization")
    parser.add_argument('--nogrow',
        action="store_true",
        help="Don't grow the system disk after the Puppet initialization")
    parser.add_argument('--grow-partition', type=int,
        help="Partition of the system disk to grow (default: %d)" % \
        DEFAULT_GROW_PARTITION,
        default=DEFAULT_GROW_PARTITION)
    ##
    ## Certmgr options
    ##
    parser.add_argument('--caserver-disable', action="store_true",
        help="Disable Certmgr actions")
    certmgr_config = CertmgrConfig()
    certmgr_config.add_standard_args(parser)
    ##
    ## Roger options
    ##
    parser.add_argument('--roger-disable', action="store_true", default=False,
                        help="Disable Roger actions")
    parser.add_argument("--roger-appstate", help="Initial roger appstate",
                        default="build")
    roger_config = RogerConfig()
    roger_config.add_standard_args(parser)

    ##
    ## Nova options
    ##
    parser.add_argument('--nova-disable', action="store_true",
        help="Disable Nova actions")
    nova_config = NovaConfig()
    nova_config.add_standard_args(parser)
    parser.add_argument('--nova-sshkey', type=str,
        help="OpenStack SSH key name",
        default=os.environ.get('AIBS_SSHKEY_NAME', None)
    ).completer = NovaCompleter(cache='keypair')
    parser.add_argument('--nova-availabilityzone', type=str,
        help="OpenStack availability zone",
        default=os.environ.get('AIBS_VMAVAILZONE_NAME', None)
    ).completer = NovaCompleter('availabilityzone')
    parser.add_argument('--nova-flavor', type=str,
        help="Openstack flavor (default: %s)" % DEFAULT_OPENSTACK_FLAVOR,
        default=os.environ.get('AIBS_VMFLAVOR_NAME', DEFAULT_OPENSTACK_FLAVOR)
    ).completer = NovaCompleter(cache='flavor')

    bootable_elements = parser.add_mutually_exclusive_group(required=False)
    bootable_elements.add_argument('--nova-boot-from-existing-volume',
        type=str, help="Cinder Volume UUID to boot from", default=None)

    images = bootable_elements.add_mutually_exclusive_group(required=False)
    images.add_argument('-i', '--nova-image', type=str,
        help="OpenStack image name").completer = NovaCompleter(cache='image')
    images.add_argument('--slc5', action="store_const", dest='nova_image',
        const='slc5', help="Select latest SLC5 image available")
    images.add_argument('--slc6', action="store_const", dest='nova_image',
        const='slc6', help="Select latest SLC6 image available")
    images.add_argument('--cc7', action="store_const", dest='nova_image',
        const='cc7', help="Select latest CC7 image available")
    images.set_defaults(nova_image=os.environ.get('AIBS_VMIMAGE_NAME', None))

    parser.add_argument('--nova-boot-from-new-volume', type=str,
        help="Size (in GB or TB) of the cinder volume to be created"
            " (e.g. '100GB', '1TB'). See manpage for more options.",
        default=None)
    parser.add_argument('--nova-attach-existing-volume', type=str,
        help="Cinder Volume UUID to attach to the new server",
        action='append', default=[])
    parser.add_argument('--nova-attach-new-volume', type=str,
        help="Size (in GB or TB) of the cinder volume to be attached"
            " (e.g. '100GB', '1TB'). See manpage for more options.",
        action='append', default=[])
    parser.add_argument('--nova-parameter', type=str,
        help="Openstack metaparameter", action='append', default=[])
    ##
    ## Foreman options
    ##
    parser.add_argument('--foreman-disable', action="store_true",
        help="Disable Foreman actions")
    foreman_config = ForemanConfig()
    foreman_config.add_standard_args(parser)
    parser.add_argument('--foreman-environment', type=str,
        help="Foreman environment (default: %s)" % DEFAULT_FOREMAN_ENVIRONMENT,
        default=os.environ.get('AIBS_ENVIRONMENT_NAME', DEFAULT_FOREMAN_ENVIRONMENT)
    ).completer = ForemanCompleter(model='environments')
    parser.add_argument('-g', '--foreman-hostgroup', type=str,
        help="Foreman hostgroup",
        default=os.environ.get('AIBS_HOSTGROUP_NAME', None)
        ).completer = ForemanCompleter(model='hostgroups',item='label')
    parser.add_argument('--foreman-parameter', type=str,
        help="Foreman parameter", action='append', default=[])
    ##
    ## Positional
    ##
    parser.add_argument('hostname', nargs='?', default=None,
        help="Hostname (qualified or not)"
        ).completer = ForemanCompleter()
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    # Most of these checks will be removed when support for
    # environment variables is dropped.
    if args.foreman_hostgroup is None:
        parser.error('Foreman hostgroup not specified.')
    if args.nova_image and args.nova_boot_from_existing_volume:
        parser.error("More than one bootable element provided. "
            "In case you just specify one, check the env variable 'AIBS_VMIMAGE_NAME'")

    options_to_boot_from = """You can boot from:
        - An image ('openstack image list') or an image alias {--slc5, --slc6, --cc7}
        - An existing bootable volume ('openstack volume list')
        - An image ('openstack image list') and the size of a volume to boot from"""

    if not (args.nova_image or args.nova_boot_from_existing_volume):
        parser.error("No bootable element provided. %s" % options_to_boot_from)

    if args.nova_boot_from_existing_volume and args.nova_boot_from_new_volume:
        parser.error("More than one bootable element provided. %s" % options_to_boot_from)

    if args.nova_boot_from_existing_volume:
        match = validate_arg_with_regex('boot_existing_volume', args.nova_boot_from_existing_volume)
        if not match:
            parser.error("--nova-boot-from-existing-volume must be a valid UUID4")
        ATTACHMENTS['vda'] = {'info': match.group('uuid'),
            'dot': 1 if match.group('dot') is not None else 0,
            'type': None}

    if args.nova_boot_from_new_volume:
        match = validate_arg_with_regex('boot_new_volume', args.nova_boot_from_new_volume)
        if not match:
            parser.error("--nova-boot-from-new-volume must be a valid size in "
                "GB or TB (e.g. '100GB', '1TB')")
        ATTACHMENTS['vda'] = {'info': match.group('size'),
            'dot': 1 if match.group('dot') is not None else 0,
            'type': match.group('type')}

    auto_devices = []
    for index, volume in enumerate(args.nova_attach_existing_volume + args.nova_attach_new_volume):
        match = validate_arg_with_regex('attach_new_volume', volume) \
            or validate_arg_with_regex('attach_existing_volume', volume)
        if not match:
            parser.error("Bad format for attaching a volume. The format must be "
                "'<device>=<UUID>' or '<device>=<size>'")
        volume_data = {'info': match.group('value'),
            'dot': 1 if match.group('dot') is not None else 0,
            'type': None if not 'type' in match.groupdict() else match.group('type')}
        device = match.group('device')
        if device == 'vda':
            parser.error("It is not possible to attach a volume in device 'vda' as this device is "
                "used for booting")
        if device in ATTACHMENTS:
            parser.error("It is not possible to attach more than one volume to the same device")
        if index < len(args.nova_attach_existing_volume) \
                and not is_valid_UUID(volume_data['info']):
            parser.error("--nova-attach-existing-volume must be a valid UUID4")
        if index >= len(args.nova_attach_existing_volume) \
                and not is_valid_size_format(volume_data['info']):
            parser.error("--nova-attach-new-volume must be a valid size in GB or "
                "TB (e.g. '100GB', '1TB')")
        if is_valid_UUID(volume_data['info']) \
                and volume_data['info'] in (ATTACHMENTS.values() + auto_devices):
            parser.error("It is not possible to attach same volume twice")
        if device == 'auto':
            auto_devices.append(volume_data)
        else:
            ATTACHMENTS[device] = volume_data

    device_names = generator_device_names()
    for auto_device in auto_devices:
        device = device_names.next()
        while device in ATTACHMENTS:
            device = device_names.next()
        ATTACHMENTS[device] = auto_device

    for parameter in args.foreman_parameter + args.nova_parameter:
        if not re.match(r'\S+?=\S+?', parameter):
            parser.error("Invalid Foreman/Nova parameter '%s' (syntax: key=value)" % parameter)
    return args

def print_summary(args, fqdn, openstack_env):
    certmgrconf = CertmgrConfig()
    roger_config = RogerConfig()
    logging.info("Trying to bootstrap '%s'..." % fqdn)
    logging.info("VM flavor: %s" % args.nova_flavor)
    if args.nova_image and not args.nova_boot_from_new_volume:
        logging.info("Booting from image: %s" % args.nova_image)
    elif args.nova_boot_from_existing_volume:
        logging.info("Booting from volume: %s" % args.nova_boot_from_existing_volume)
    elif args.nova_boot_from_new_volume:
        logging.info("Booting from a new volume created using image: %s" % args.nova_image)
    logging.info("VM tenant: %s" % openstack_env.os_project_name)
    for volume in args.nova_attach_existing_volume:
        logging.info("Attaching volume: %s" % volume)
    for volume in args.nova_attach_new_volume:
        logging.info("Creating and attaching a volume: %s" % volume)
    if args.nova_parameter:
        logging.info("VM metaparameters: %s" % ', '.join(args.nova_parameter))
    if args.nova_sshkey:
        logging.info("VM SSH key name: %s" % args.nova_sshkey)
    if args.nova_availabilityzone:
        logging.info("VM availability zone: %s" % args.nova_availabilityzone)
    if args.landb_responsible:
        logging.info("LANDB responsible: %s" % args.landb_responsible)
    if args.landb_mainuser:
        logging.info("LANDB mainuser: %s" % args.landb_mainuser)
    logging.info("Foreman environment: %s" % args.foreman_environment)
    logging.info("Foreman hostgroup: %s" % args.foreman_hostgroup)
    if args.foreman_parameter:
        logging.info("Foreman parameters: %s" % ', '.join(args.foreman_parameter))
    logging.info("Puppet master: %s" % args.puppetmaster_hostname)
    logging.info("Certmgr server: %s" % certmgrconf.certmgr_hostname)
    logging.info("Certmgr port: %s" % certmgrconf.certmgr_port)
    logging.info("Roger server: %s" % roger_config.roger_hostname)
    logging.info("Roger port: %s" % str(roger_config.roger_port))

def _manage_volumes(cinder, hostname, image=None, attachments={}):
    volumes = {}
    n_created_volumes = 0
    for device, volume_data in attachments.iteritems():
        volume = None
        if is_valid_size_format(volume_data['info']):
            n_created_volumes += 1
            volume = cinder.create(size=volume_data['info'],
                imageRef=image if device == 'vda' else None,
                display_name='%s_vol_%s' % (hostname, str(n_created_volumes).zfill(3)),
                volume_type=volume_data['type'])
        volume_id = volume.id if volume else volume_data['info']
        if is_valid_UUID(volume_id):
            volume = cinder.is_ready(volume_id=volume_id,
                needs_to_be_bootable=bool(device == 'vda'),
                wait_time=60 if device == 'vda' else 5)
            volumes[device] = "%s:::%s" % (volume.id, volume_data['dot'])
            logging.info("Attaching volume '%s' in device: '%s'" % (volume.id, device))
    return volumes

def main():
    """Application entrypoint"""
    args = parse_cmdline_args()
    fconfig = ForemanConfig()
    fconfig.read_config_and_override_with_pargs(args)

    configure_logging(args)

    try:
        openstack_env = get_openstack_environment()
    except AiToolsInitError, error:
        logging.error(error)
        return 3

    try:
        krb_principal = verify_kerberos_environment()
    except AiToolsInitError, error:
        logging.error("TGT not found or expired. Exiting...")
        return 4

    fqdn = append_domain(args.hostname)
    if fqdn is None:
        fqdn = generate_random_fqdn(args.prefix)

    if not validate_fqdn(fqdn):
        logging.error("'%s' is not valid (too long or not in the 'cern.ch' domain)" % fqdn)
        return 5

    print_summary(args, fqdn, openstack_env)

    try:
        userdata = generate_userdata(args)
        logging.debug(userdata)
    except AiToolsInitError, error:
        logging.error("Failed to generate userdata (%s). Exiting..." % error)
        return 6

    if args.userdata_dump:
        logging.info("Dumping userdata to %s..." % args.userdata_dump)
        try:
            userdata_file = open(args.userdata_dump, "w")
            userdata_file.write(userdata)
            userdata_file.close()
        except IOError as error:
            logging.error("Failed to dump userdata (%s). Exiting..." % error)
            return 7

    foreman = ForemanClient(dryrun=args.dryrun, deref_alias=args.dereference_alias)

    if not args.foreman_disable:
        try:
            foreman.addhost(fqdn=fqdn,
                environment=args.foreman_environment,
                hostgroup=args.foreman_hostgroup,
                owner=krb_principal.replace("@CERN.CH", ""))
            for parameter in set(args.foreman_parameter):
                foreman.addhostparameter(fqdn, *parameter.split('=', 1))
        except AiToolsForemanError, error:
            logging.error("Couldn't create Foreman entry (%s). VM not started." % error)
            return 10

    if not args.caserver_disable:
        try:
            certmgr = CertmgrClient(dryrun=args.dryrun, deref_alias=args.dereference_alias)
            certmgr.stage(fqdn)
        except AiToolsCertmgrError, error:
            logging.error("Couldn't stage host (%s). VM not started." % error)
            if not args.foreman_disable:
                foreman.delhost(fqdn)
            return 20

    if not args.nova_disable:
        try:
            auth_client = OpenstackAuthClient(openstack_env)

            nova = NovaClient(auth_client, dryrun=args.dryrun)
            cinder = CinderClient(auth_client, dryrun=args.dryrun)

            meta = dict(map(lambda x: x.split('=', 1), args.nova_parameter))
            meta['tenant-name'] = openstack_env.os_project_name
            project_id = getattr(openstack_env, 'os_project_id', None) or \
                auth_client.get_tenant_uuid(openstack_env.os_project_name,
                    username=krb_principal.replace("@CERN.CH", ""))
            meta['tenant-id'] = project_id
            if args.landb_responsible:
                meta['landb-responsible'] = args.landb_responsible
            if args.landb_mainuser:
                meta['landb-mainuser'] = args.landb_mainuser

            image = args.nova_image
            if image in IMAGES_METADATA:
                image = nova.get_latest_image(*IMAGES_METADATA[image])
            elif image and not is_valid_UUID(image):
                image = nova.find_image_by_name(name=image)

            volumes = _manage_volumes(cinder=cinder,
                        hostname=fqdn,
                        attachments=ATTACHMENTS,
                        image=image)
            logging.debug(volumes)

            if args.nova_boot_from_new_volume or args.nova_boot_from_existing_volume:
                # When booting from a volume, an image should not
                # be provided to nova as it will try to boot from the image
                image = None

            nova.boot(fqdn,
                flavor=args.nova_flavor,
                image=image,
                userdata=userdata,
                meta=meta,
                key_name=args.nova_sshkey,
                availability_zone=args.nova_availabilityzone,
                block_device_mapping=volumes)
        except AiToolsNovaError, error:
            logging.error("Couldn't create VM (%s)" % error)
            if not args.foreman_disable:
                foreman.delhost(fqdn)
            if args.nova_boot_from_new_volume and volumes and 'vda' in volumes:
                volume_id = volumes['vda'].split(':')[0]
                logging.error("Cinder volume '{0}' was created but booting failed. "
                    "You can re-try to boot from it with option '--nova-boot-from-existing-volume {0}'"
                    .format(volume_id))
            return 30
        except AiToolsCinderError, error:
            logging.error("Cinder operation failed (%s)" % error)
            if not args.foreman_disable:
                foreman.delhost(fqdn)
            return 40
        except AiToolsOpenstackAuthError, error:
            logging.error("User not authorized to perform this operation:\n %s" % error)
            if not args.foreman_disable:
                foreman.delhost(fqdn)
            return 50

    if not args.roger_disable:
        roger_client = RogerClient(dryrun=args.dryrun, deref_alias=args.dereference_alias)
        try:
            # note default for alarms is false, but if already exists, won't touch
            # probably what we want...
            roger_client.update_or_create_state(fqdn, appstate=args.roger_appstate)
        except AiToolsRogerNotAllowedError, e:
            # new machines should be allowed, so this means you're trying to update
            # something you shouldn't be updating
            logging.error("Couldn't update roger due to permissions, perhaps entry already exists? (%s)" % e)
        except AiToolsRogerInternalServerError:
            logging.error("Received 500 trying to update roger")
            logging.info("Please be aware alarm masking may not work till resolved")
            logging.info("If this is important verify with 'roger show' and update with 'roger update'")
        except Exception, e:
            logging.error("Received unexpected error when trying to add to roger: '%s'" % e)
            logging.info("Please be aware alarm masking may not work till resolved")
            logging.info("If this is important verify with 'roger show' and update with 'roger update'")


    logging.info("----------------------------------------------------------------------")
    logging.info("* Your machine is booting and the network is being configured right now,")
    logging.info("  Puppet will run immediately after a successful boot process.")
    logging.info("* It typically takes around 30 minutes between this command is")
    logging.info("  executed and the first Puppet report arrives to Foreman:")
    logging.info("  https://%s/hosts/%s/reports" % (fconfig.foreman_hostname, fqdn))
    logging.info("  (although this depends a lot on the complexity of your configuration)")
    logging.info("* After the initial configuration, if you've set rootegroups or")
    logging.info("  rootusers in Foreman or Hiera you should be able to log in as")
    logging.info("  root using your Kerberos credentials. The LANDB responsible")
    logging.info("  has also root access by default.")
    logging.info("* You can check the status of the VM creation request by running:")
    logging.info("  'openstack server show %s'" % fqdn.replace('.cern.ch', ''))
    if args.landb_responsible or args.landb_mainuser:
        logging.info("* A custom LANDB responsible/user has been set. It will be visible")
        logging.info("  in Foreman a few minutes after the VM is booted. In the")
        logging.info("  meantime, the Foreman owner will be the issuer of this command.")
        logging.info("  (%s)" % krb_principal)
    logging.info("* In case of problems, if you provided a SSH key when creating the VM")
    logging.info("  use it to log into the box and take a look at /var/log/firstboot.log.")
    logging.info("  Console log can be retrieved by using 'openstack console log show'.")
    logging.info("----------------------------------------------------------------------")
    return 0

if __name__ == '__main__':
    sys.exit(main())
