#!/usr/bin/env python
# This program helps to kill a puppet-managed
# Foreman-enabled Openstack VM
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>

# Exit codes:
#   0 all operations succeeded
#   2 bad command line
#   3 bad user environment
#   4 Kerberos TGT not found or expired
#  10 Foreman registration failed
#  20 Host staging failed
#  30 Nova boot failed

import os
import sys
import logging
import argparse

from aitools.foreman import ForemanClient
from aitools.certmgr import CertmgrClient
from aitools.nova import NovaClient

from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment
from aitools.common import verify_openstack_environment
from aitools.common import generate_random_fqdn
from aitools.common import generate_userdata
from aitools.common import validate_fqdn

from aitools.errors import AiToolsInitError, AiToolsForemanError
from aitools.errors import AiToolsCertmgrError, AiToolsNovaError

DEFAULT_OPENSTACK_FLAVOR="m1.small"
DEFAULT_OPENSTACK_SECUTIRYGROUPS="default"

DEFAULT_FOREMAN_TIMEOUT = 15
DEFAULT_FOREMAN_HOSTNAME = "judy.cern.ch"
DEFAULT_FOREMAN_PORT = 8443
DEFAULT_FOREMAN_ENVIRONMENT = 'production'

DEFAULT_NOVA_TIMEOUT = 15

DEFAULT_PUPPETMASTER_HOSTNAME = "it-puppet-masters-public.cern.ch"
DEFAULT_CASERVER_HOSTNAME = "baby01.cern.ch"
DEFAULT_CASERVER_PORT = 8008

DEFAULT_USERDATA_PATH = "/usr/share/ai-tools/userdata/nosusie"

def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()
    ##
    ## Internal options
    ##
    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-d', '--dryrun',
        action="store_true",
        help="Don't do the actual deletion requests")
    parser.add_argument('-j', '--json',
        action="store_true",
        help="Produce JSON output")
    parser.add_argument('-e', '--errors-only', dest="errors",
        action="store_true",
        help="Outputs errors only")
    parser.add_argument('--prefix', type=str,
        help="Prefix to prepend to the randomly generated hostname")
    parser.add_argument('--puppetmaster-hostname', type=str,
        help="Hostname of the master used to request the host cert the VM (default: '%s')" % \
        DEFAULT_PUPPETMASTER_HOSTNAME,
        default=os.environ.get('AIBS_PUPPETMASTER_HOSTNAME', DEFAULT_PUPPETMASTER_HOSTNAME))
    parser.add_argument('--caserver-hostname', type=str,
        help="Hostname of the certmgr server used to retrieve the host certificate (default: '%s')" % \
        DEFAULT_CASERVER_HOSTNAME,
        default=os.environ.get('AIBS_CASERVER_HOSTNAME', DEFAULT_CASERVER_HOSTNAME))
    parser.add_argument('--caserver-port', type=str,
        help="Port of the certmgr server used to retrieve the host certificate (default: '%s')" % \
        DEFAULT_CASERVER_PORT,
        default=DEFAULT_CASERVER_PORT)
    parser.add_argument('--userdata-path', type=str,
        help="Path to the template to generate the user data of the virtual machine (default: '%s')" % \
        DEFAULT_USERDATA_PATH,
        default=os.environ.get('AIBS_VMBASEUSERDATA_PATH', DEFAULT_USERDATA_PATH))
    ##
    ## Nova options
    ##
    parser.add_argument('--nova-timeout', type=int,
        help="Timeout for OpenStack operations (default: %s seconds)" % \
        DEFAULT_NOVA_TIMEOUT,
        default = DEFAULT_NOVA_TIMEOUT)
    parser.add_argument('--nova-sshkey', type=str,
        help="OpenStack SSH key name",
        default=os.environ.get('AIBS_SSHKEY_NAME', None))
    parser.add_argument('--nova-availabilityzone', type=str,
        help="OpenStack availability zone",
        default=os.environ.get('AIBS_VMAVAILZONE_NAME', None))
    parser.add_argument('--nova-flavor', type=str,
        help="Openstack flavor (default: %s)" % DEFAULT_OPENSTACK_FLAVOR,
        default=os.environ.get('AIBS_VMFLAVOR_NAME', DEFAULT_OPENSTACK_FLAVOR))
    parser.add_argument('--nova-image', type=str,
        help="OpenStack SSH image name",
        default=os.environ.get('AIBS_VMIMAGE_NAME', None))
    parser.add_argument('--nova-securitygroups', type=str,
        help="OpenStack security groups (comma-separed list) (default: %s)" % \
        DEFAULT_OPENSTACK_SECUTIRYGROUPS,
        default=os.environ.get('AIBS_SECURITYGROUPS_LIST', DEFAULT_OPENSTACK_SECUTIRYGROUPS))
    ##
    ## Foreman options
    ##
    parser.add_argument('--foreman-timeout', type=int,
        help="Timeout for Foreman operations (default: %s seconds)" % \
        DEFAULT_FOREMAN_TIMEOUT,
        default = DEFAULT_FOREMAN_TIMEOUT)
    parser.add_argument('--foreman-hostname',
        help="Foreman hostname (default: %s)" % DEFAULT_FOREMAN_HOSTNAME,
        default=DEFAULT_FOREMAN_HOSTNAME)
    parser.add_argument('--foreman-port', type=int,
        help="Foreman Kerberos port (default: %s)" % DEFAULT_FOREMAN_PORT,
        default=DEFAULT_FOREMAN_PORT)
    parser.add_argument('--foreman-environment', type=str,
        help="Foreman environment (default: %s)" % DEFAULT_FOREMAN_ENVIRONMENT,
        default=os.environ.get('AIBS_ENVIRONMENT_NAME', DEFAULT_FOREMAN_ENVIRONMENT))
    parser.add_argument('--foreman-hostgroup', type=str,
        help="Foreman hostgroup",
        default=os.environ.get('AIBS_HOSTGROUP_NAME', None))
    parser.add_argument('hostname', nargs='?', default=None,
        help="Hostname (qualified or not)")
    args = parser.parse_args()
    if args.foreman_hostgroup is None:
        raise AiToolsInitError('Foreman hostgroup not specified.')
    if args.nova_image is None:
        raise AiToolsInitError('Openstack image not speficied.')
    return args

def print_summary(args, fqdn):
    logging.info("Trying to bootstrap '%s'..." % fqdn)
    logging.info("VM flavor: %s" % args.nova_flavor)
    logging.info("VM image: %s" % args.nova_image)
    logging.info("VM security groups: %s" % args.nova_securitygroups)
    logging.info("VM tenant: %s" % os.environ["OS_TENANT_NAME"])
    #[[ ! -z $AIBS_METAPARAMETERS_LIST ]] && echo "VM metaparameters: $AIBS_METAPARAMETERS_LIST"
    if args.nova_sshkey:
        logging.info("VM SSH key name: %s" % args.nova_sshkey)
    if args.nova_availabilityzone:
        logging.info("VM availability zone: %s" % args.nova_availabilityzone)
    #[[ ! -z $AIBS_LANDB_RESPONSIBLE ]] && echo "LANDB responsible: $AIBS_LANDB_RESPONSIBLE"
    #[[ ! -z $AIBS_LANDB_MAINUSER ]] && echo "LANDB main user: $AIBS_LANDB_MAINUSER"
    logging.info("Foreman environment: %s" % args.foreman_environment)
    logging.info("Foreman hostgroup: %s" % args.foreman_hostgroup)
    logging.info("Puppet master: %s" % args.puppetmaster_hostname)
    logging.info("CA server: %s" % args.caserver_hostname)
    logging.info("CA port: %s" % args.caserver_port)

def main():
    """Application entrypoint"""
    try:
        args = parse_cmdline_args()
    except AiToolsInitError, error:
        sys.stdout.write("Wrong command line arguments (%s)\n" % error)
        return 2

    configure_logging(args)

    try:
        verify_openstack_environment()
    except AiToolsInitError, error:
        logging.error(error)
        return 3

    try:
        verify_kerberos_environment()
    except AiToolsInitError, error:
        logging.error("TGT not found or expired. Exiting...")
        return 4

    fqdn = args.hostname
    if fqdn is None:
        fqdn = generate_random_fqdn(args.prefix)

    if not validate_fqdn(fqdn):
        logging.error("FQDN '%s' is not valid. See RFC 1123." % fqdn)
        return 5

    print_summary(args, fqdn)

    foreman = ForemanClient(args.foreman_hostname, args.foreman_port,
        args.foreman_timeout, args.dryrun)
    certmgr = CertmgrClient(args.caserver_hostname, args.caserver_port,
        args.foreman_timeout, args.dryrun)
    nova = NovaClient(os.environ["OS_AUTH_URL"], os.environ["OS_USERNAME"],
        os.environ["OS_PASSWORD"], os.environ["OS_TENANT_NAME"],
        args.nova_timeout, args.dryrun)

    try:
        foreman.addhost(fqdn=fqdn,
            environment=args.foreman_environment,
            hostgroup=args.foreman_hostgroup)
    except AiToolsForemanError, error:
        logging.error("Couldn't create Foreman entry (%s)" % error)
        return 10

    try:
        certmgr.stage(fqdn)
    except AiToolsCertmgrError, error:
        foreman.delhost(fqdn)
        logging.error("Couldn't stage host (%s)" % error)
        return 11

    try:
        userdata = generate_userdata(args)
        logging.debug(userdata)
        nova.boot(fqdn,
            flavor=args.nova_flavor,
            image=args.nova_image,
            userdata=userdata,
            key_name=args.nova_sshkey,
            availability_zone=args.nova_availabilityzone)
    except AiToolsNovaError, error:
        logging.error("Couldn't create VM (%s)" % error)
        foreman.delhost(fqdn)
        return 12

    logging.info("Your machine is booting and the network is being configured right now.")
    logging.info("After a successful boot process Puppet will run immediately.")
    logging.info("In case of problems, if you provided a SSH key when creating the VM")
    logging.info("use it to log into the box and take a look at /var/log/boothook.log")
    return 0

if __name__ == '__main__':
    sys.exit(main())
