#!/usr/bin/env python
# This program helps to kill a puppet-managed
# Foreman-enabled Openstack VM
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>

# Exit codes:
#  0 all operations succeeded
#  1 some operations failed
#  2 bad command line
#  3 bad user environment
#  4 Kerberos TGT not found or expired

import os
import sys
import logging
import argparse
import re
import json

from aitools.foreman import ForemanClient

from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment
from aitools.common import generate_random_fqdn
from aitools.common import validate_fqdn

from aitools.errors import AiToolsInitError
from aitools.errors import AiToolsForemanError

DEFAULT_FOREMAN_TIMEOUT = 15
DEFAULT_FOREMAN_HOSTNAME = "judy.cern.ch"
DEFAULT_FOREMAN_PORT = 8443
DEFAULT_FOREMAN_ENVIRONMENT = 'production'

DEFAULT_NOVA_TIMEOUT = 15

def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-d', '--dryrun',
        action="store_true",
        help="Don't do the actual deletion requests")
    parser.add_argument('-j', '--json',
        action="store_true",
        help="Produce JSON output")
    parser.add_argument('-e', '--errors-only', dest="errors",
        action="store_true",
        help="Outputs errors only")
    parser.add_argument('--prefix', type=str,
        help="Prefix to prepend to the randomly generated hostname")
    ## Nova options
    parser.add_argument('--nova-timeout', type=int,
        help="Timeout for OpenStack operations (default: %s seconds)" % \
        DEFAULT_NOVA_TIMEOUT,
        default = DEFAULT_NOVA_TIMEOUT)
    ## Foreman options
    parser.add_argument('--foreman-timeout', type=int,
        help="Timeout for Foreman operations (default: %s seconds)" % \
        DEFAULT_FOREMAN_TIMEOUT,
        default = DEFAULT_FOREMAN_TIMEOUT)
    parser.add_argument('--foreman-hostname',
        help="Foreman hostname (default: %s)" % DEFAULT_FOREMAN_HOSTNAME,
        default=DEFAULT_FOREMAN_HOSTNAME)
    parser.add_argument('--foreman-port', type=int,
        help="Foreman Kerberos port (default: %s)" % DEFAULT_FOREMAN_PORT,
        default=DEFAULT_FOREMAN_PORT)
    parser.add_argument('--foreman-environment', type=str,
        help="Foreman environment (default: %s)" % DEFAULT_FOREMAN_ENVIRONMENT,
        default=os.environ.get('AIBS_ENVIRONMENT_NAME', DEFAULT_FOREMAN_ENVIRONMENT))
    parser.add_argument('--foreman-hostgroup', type=str,
        help="Foreman hostgroup",
        default=os.environ.get('AIBS_HOSTGROUP_NAME', None))
    parser.add_argument('hostname', nargs='?', default=None,
        help="Hostname (qualified or not)")
    args = parser.parse_args()
    if args.foreman_hostgroup is None:
        raise AiToolsInitError('Foreman hostgroup not defined')
    return args

def main():
    """Application entrypoint"""
    try:
        args = parse_cmdline_args()
    except AiToolsInitError, error:
        sys.stdout.write("Wrong command line arguments (%s)\n" % error)
        return 2

    configure_logging(args)

    try:
        verify_kerberos_environment()
    except AiToolsInitError, error:
        logging.error("TGT not found or expired. Exiting...")


    foreman = ForemanClient(args.foreman_hostname, \
        args.foreman_port,
        args.foreman_timeout,
        args.dryrun)

    fqdn = args.hostname
    if fqdn is None:
        fqdn = generate_random_fqdn(args.prefix)

    if not validate_fqdn(fqdn):
        logging.error("FQDN '%s' is not valid. See RFC 1123." % fqdn)
        return 5

    try:
        foreman.addhost(fqdn=fqdn,
            environment=args.foreman_environment,
            hostgroup=args.foreman_hostgroup)
        foreman.delhost(fqdn)
    except AiToolsForemanError, error:
        logging.error("Couldn't create Foreman entry (%s)" % error)



    return 0

if __name__ == '__main__':
    sys.exit(main())
