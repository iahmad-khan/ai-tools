#!/usr/bin/env python
# This program helps to create a puppet-managed
# Foreman-enabled Openstack VM.
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>

# Exit codes:
#   0 all operations succeeded
#   2 bad command line
#   3 bad user environment
#   4 Kerberos TGT not found or expired
#   5 FQDN is invalid
#   6 Userdata generation failed
#  10 Foreman registration failed
#  20 Host staging failed
#  30 Nova boot failed

import os
import sys
import logging
import argparse
import argcomplete
import re
from aitools.config import ForemanConfig, CertmgrConfig, NovaConfig, RogerConfig

from aitools.foreman import ForemanClient
from aitools.certmgr import CertmgrClient
from aitools.roger import RogerClient
from aitools.nova import NovaClient

from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment
from aitools.common import verify_openstack_environment
from aitools.common import generate_random_fqdn
from aitools.common import generate_userdata
from aitools.common import validate_fqdn
from aitools.common import append_domain

from aitools.errors import AiToolsInitError, AiToolsForemanError
from aitools.errors import AiToolsCertmgrError, AiToolsNovaError
from aitools.errors import AiToolsRogerNotAllowedError

from aitools.completer import ForemanCompleter
from aitools.completer import NovaCompleter

DEFAULT_OPENSTACK_FLAVOR="m1.small"
DEFAULT_OPENSTACK_SECUTIRYGROUPS="default"

DEFAULT_FOREMAN_ENVIRONMENT = 'production'

DEFAULT_PUPPETMASTER_HOSTNAME = "it-puppet-masters-public.cern.ch"

DEFAULT_PUPPETINIT_PATH = "/usr/share/ai-tools/userdata/puppetinit"
DEFAULT_PREFIX = "vm"
DEFAULT_GROW_PARTITION = 2

def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()
    ##
    ## Internal options
    ##
    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-d', '--dryrun',
        action="store_true",
        help="Don't do the requests that alter data")
    parser.add_argument('--prefix', type=str,
        help="Prefix to prepend to the randomly generated hostname (default: '%s')" % \
        DEFAULT_PREFIX,
        default=os.environ.get('AIBS_VMNAME_PREFIX', DEFAULT_PREFIX))
    parser.add_argument('--puppetmaster-hostname', type=str,
        help="Hostname of the master used to fetch the configuration (default: '%s')" % \
        DEFAULT_PUPPETMASTER_HOSTNAME,
        default=os.environ.get('AIBS_PUPPETMASTER_HOSTNAME', DEFAULT_PUPPETMASTER_HOSTNAME))
    parser.add_argument('--puppetinit-path', type=str,
        help="Path to the template to generate the userdata script to init Puppet (default: '%s')" % \
        DEFAULT_PUPPETINIT_PATH,
        default=DEFAULT_PUPPETINIT_PATH)
    parser.add_argument('--userdata-dir', type=str,
        help="Path to a directory with snippets to attach to the userdata")
    parser.add_argument('--landb-mainuser', type=str,
        help="LANDB main user to be assigned to the virtual machine",
        default=os.environ.get('AIBS_LANDB_MAINUSER', None))
    parser.add_argument('--landb-responsible', type=str,
        help="LANDB responsible to be assigned to the virtual machine",
        default=os.environ.get('AIBS_LANDB_RESPONSIBLE', None))
    parser.add_argument('--noreboot',
        action="store_true",
        help="Don't reboot after the Puppet initialization")
    parser.add_argument('--nogrow',
        action="store_true",
        help="Don't grow the system disk after the Puppet initialization")
    parser.add_argument('--grow-partition', type=int,
        help="Partition of the system disk to grow (default: %d)" % \
        DEFAULT_GROW_PARTITION,
        default=DEFAULT_GROW_PARTITION)
    ##
    ## Certmgr options
    ##
    parser.add_argument('--caserver-disable', action="store_true",
        help="Disable Certmgr actions")
    certmgr_config = CertmgrConfig()
    certmgr_config.add_standard_args(parser)
    ##
    ## Roger options
    ##
    parser.add_argument('--roger-disable', action="store_true", default=False,
                        help="Disable Roger actions")
    parser.add_argument("--roger-appstate", help="Initial roger appstate",
                        default="build")
    roger_config = RogerConfig()
    roger_config.add_standard_args(parser)

    ##
    ## Nova options
    ##
    parser.add_argument('--nova-disable', action="store_true",
        help="Disable Nova actions")
    nova_config = NovaConfig()
    nova_config.add_standard_args(parser)
    parser.add_argument('--nova-sshkey', type=str,
        help="OpenStack SSH key name",
        default=os.environ.get('AIBS_SSHKEY_NAME', None)
    ).completer = NovaCompleter(cache='keypair')
    parser.add_argument('--nova-availabilityzone', type=str,
        help="OpenStack availability zone",
        default=os.environ.get('AIBS_VMAVAILZONE_NAME', None)
    ).completer = NovaCompleter('availabilityzone')
    parser.add_argument('--nova-flavor', type=str,
        help="Openstack flavor (default: %s)" % DEFAULT_OPENSTACK_FLAVOR,
        default=os.environ.get('AIBS_VMFLAVOR_NAME', DEFAULT_OPENSTACK_FLAVOR)
    ).completer = NovaCompleter(cache='flavor')
    parser.add_argument('-i', '--nova-image', type=str,
        help="OpenStack image name",
        default=os.environ.get('AIBS_VMIMAGE_NAME', None)
    ).completer = NovaCompleter(cache='image')
    parser.add_argument('--nova-parameter', type=str,
        help="Openstack metaparameter", action='append', default=[])
    ##
    ## Foreman options
    ##
    parser.add_argument('--foreman-disable', action="store_true",
        help="Disable Foreman actions")
    foreman_config = ForemanConfig()
    foreman_config.add_standard_args(parser)
    parser.add_argument('--foreman-environment', type=str,
        help="Foreman environment (default: %s)" % DEFAULT_FOREMAN_ENVIRONMENT,
        default=os.environ.get('AIBS_ENVIRONMENT_NAME', DEFAULT_FOREMAN_ENVIRONMENT)
    ).completer = ForemanCompleter(model='environments')
    parser.add_argument('-g', '--foreman-hostgroup', type=str,
        help="Foreman hostgroup",
        default=os.environ.get('AIBS_HOSTGROUP_NAME', None)
        ).completer = ForemanCompleter(model='hostgroups',item='label')
    parser.add_argument('--foreman-parameter', type=str,
        help="Foreman parameter", action='append', default=[])
    ##
    ## Positional
    ##
    parser.add_argument('hostname', nargs='?', default=None,
        help="Hostname (qualified or not)"
        ).completer = ForemanCompleter()
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    # Most of these checks will be removed when support for
    # environment variables is dropped.
    if args.foreman_hostgroup is None:
        parser.error('Foreman hostgroup not specified.')
    if args.nova_image is None:
        parser.error('Openstack image not specified (nova image-list)')
    for parameter in args.foreman_parameter + args.nova_parameter:
        if not re.match(r'\S+?=\S+?', parameter):
            parser.error("Invalid Foreman/Nova parameter '%s' (syntax: key=value)" % parameter)
    return args

def print_summary(args, fqdn):
    certmgrconf = CertmgrConfig()
    roger_config = RogerConfig()
    logging.info("Trying to bootstrap '%s'..." % fqdn)
    logging.info("VM flavor: %s" % args.nova_flavor)
    logging.info("VM image: %s" % args.nova_image)
    logging.info("VM tenant: %s" % os.environ["OS_TENANT_NAME"])
    if args.nova_parameter:
        logging.info("VM metaparameters: %s" % ', '.join(args.nova_parameter))
    if args.nova_sshkey:
        logging.info("VM SSH key name: %s" % args.nova_sshkey)
    if args.nova_availabilityzone:
        logging.info("VM availability zone: %s" % args.nova_availabilityzone)
    if args.landb_responsible:
        logging.info("LANDB responsible: %s" % args.landb_responsible)
    if args.landb_mainuser:
        logging.info("LANDB mainuser: %s" % args.landb_mainuser)
    logging.info("Foreman environment: %s" % args.foreman_environment)
    logging.info("Foreman hostgroup: %s" % args.foreman_hostgroup)
    if args.foreman_parameter:
        logging.info("Foreman parameters: %s" % ', '.join(args.foreman_parameter))
    logging.info("Puppet master: %s" % args.puppetmaster_hostname)
    logging.info("Certmgr server: %s" % certmgrconf.certmgr_hostname)
    logging.info("Certmgr port: %s" % certmgrconf.certmgr_port)
    logging.info("Roger server: %s" % roger_config.roger_hostname)
    logging.info("Roger port: %s" % str(roger_config.roger_port))

def main():
    """Application entrypoint"""
    args = parse_cmdline_args()
    fconfig = ForemanConfig()
    fconfig.read_config_and_override_with_pargs(args)

    configure_logging(args)

    try:
        verify_openstack_environment()
    except AiToolsInitError, error:
        logging.error(error)
        return 3

    try:
        krb_principal = verify_kerberos_environment()
    except AiToolsInitError, error:
        logging.error("TGT not found or expired. Exiting...")
        return 4

    fqdn = append_domain(args.hostname)
    if fqdn is None:
        fqdn = generate_random_fqdn(args.prefix)

    if not validate_fqdn(fqdn):
        logging.error("FQDN '%s' is not valid. See RFC 1123." % fqdn)
        return 5

    print_summary(args, fqdn)

    try:
        userdata = generate_userdata(args)
        logging.debug(userdata)
    except AiToolsInitError, error:
        logging.error("Failed to generate userdata (%s). Exiting..." % error)
        return 6

    foreman = ForemanClient(dryrun=args.dryrun)

    if not args.foreman_disable:
        try:
            foreman.addhost(fqdn=fqdn,
                environment=args.foreman_environment,
                hostgroup=args.foreman_hostgroup,
                owner=krb_principal.replace("@CERN.CH", ""))
            for parameter in set(args.foreman_parameter):
                foreman.addhostparameter(fqdn, *parameter.split('=', 1))
        except AiToolsForemanError, error:
            logging.error("Couldn't create Foreman entry (%s). VM not started." % error)
            return 10

    if not args.caserver_disable:
        try:
            certmgr = CertmgrClient(dryrun=args.dryrun)
            certmgr.stage(fqdn)
        except AiToolsCertmgrError, error:
            logging.error("Couldn't stage host (%s). VM not started." % error)
            if not args.foreman_disable:
                foreman.delhost(fqdn)
            return 20

    if not args.nova_disable:
        try:
            nova = NovaClient(os.environ["OS_AUTH_URL"], os.environ["OS_USERNAME"],
                os.environ["OS_PASSWORD"], os.environ["OS_TENANT_NAME"],
                os.environ.get('OS_CACERT', None), dryrun=args.dryrun)
            meta = dict(map(lambda x: x.split('=', 1), args.nova_parameter))
            if args.landb_responsible:
                meta['landb-responsible'] = args.landb_responsible
            if args.landb_mainuser:
                meta['landb-mainuser'] = args.landb_mainuser
            nova.boot(fqdn,
                flavor=args.nova_flavor,
                image=args.nova_image,
                userdata=userdata,
                meta=meta,
                key_name=args.nova_sshkey,
                availability_zone=args.nova_availabilityzone)
        except AiToolsNovaError, error:
            logging.error("Couldn't create VM (%s)" % error)
            if not args.foreman_disable:
                foreman.delhost(fqdn)
            return 30

    if not args.roger_disable:
        roger_client = RogerClient()
        try:
            # note default for alarms is false, but if already exists, won't touch
            # probably what we want...
            roger_client.update_or_create_state(fqdn, appstate=args.roger_appstate)
        except AiToolsRogerNotAllowedError, e:
            # new machines should be allowed, so this means you're trying to update
            # something you shouldn't be updating
            logging.error("Couldn't update roger, perhaps entry already exists? (%s)" % e)


    logging.info("----------------------------------------------------------------------")
    logging.info("* Your machine is booting and the network is being configured right now,")
    logging.info("  Puppet will run immediately after a successful boot process.")
    logging.info("* It typically takes around 30 minutes between this command is")
    logging.info("  executed and the first Puppet report arrives to Foreman:")
    logging.info("  https://%s/hosts/%s/reports" % (fconfig.foreman_hostname, fqdn))
    logging.info("  (although this depends a lot on the complexity of your configuration)")
    logging.info("* After the initial configuration, if you've set rootegroups or")
    logging.info("  rootusers in Foreman or Hiera you should be able to log in as")
    logging.info("  root using your Kerberos credentials. The LANDB responsible")
    logging.info("  has also root access by default.")
    logging.info("* You can check the status of the VM creation request by running:")
    logging.info("  'nova show %s'" % fqdn.replace('.cern.ch', ''))
    if args.landb_responsible or args.landb_mainuser:
        logging.info("* A custom LANDB responsible/user has been set. It will be visible")
        logging.info("  in Foreman a few minutes after the VM is booted. In the")
        logging.info("  meantime, the Foreman owner will be the issuer of this command.")
        logging.info("  (%s)" % krb_principal)
    logging.info("* In case of problems, if you provided a SSH key when creating the VM")
    logging.info("  use it to log into the box and take a look at /var/log/firstboot.log.")
    logging.info("  Console log can be retrieved by using 'nova console-log'.")
    logging.info("----------------------------------------------------------------------")
    return 0

if __name__ == '__main__':
    sys.exit(main())
