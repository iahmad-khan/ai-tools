#!/usr/bin/env python
# This program helps to perform power operations
# on IPMI-enabled hosts via Foreman.
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>
# July 2013

# Exit codes:
#  0 all power operations succeeded
#  1 some power operations failed
#  2 bad command line
#  4 Kerberos TGT not found or expired

import sys
import os
import re
import argparse
import argcomplete
import tempfile
import socket
import logging
import time
import functools
import requests
import json
import multiprocessing

from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment

from aitools.foreman import ForemanClient, add_common_foreman_args

from aitools.errors import AiToolsInitError, AiToolsForemanError

from aitools.completer import ForemanCompleter
from argcomplete.completers import ChoicesCompleter

# Reset not available as the smart proxy does not support it yet
VALID_OPERATIONS=("on", "off", "soft", "cycle", "status")
DEFAULT_OPERATION=("status")
DEFAULT_LOGGING_LEVEL=logging.ERROR

def timed(f):
    """Decorator to print the time spent executing a given function"""
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        start = time.time()
        result = f(*args, **kwargs)
        elapsed = time.time() - start
        logging.debug("Executed '%s' in %.2f ms" % (f.__name__, elapsed*1000))
        return result
    return wrapper

def format_output(summary):
    """Formats the output based on the output format specified"""
    if args.errors:
        summary = filter(lambda x: not x['success'], summary)
    if args.json:
        print json.dumps(summary)
    else:
        for fqdn in summary:
            sys.stdout.write("%s: " % fqdn['fqdn'])
            print fqdn['details'] if fqdn['success'] \
                else "Error (%s)" % fqdn['details']

@timed
def foreman_power_operation(client, fqdn):
    """Performs a power operation on the passed fqdn"""
    try:
        (code, msg) = client.power_operation(fqdn, args.operation)
        if args.dryrun:
            return (False, "Dryrun enabled")
        if code == requests.codes.ok:
            outcome = msg["power"]
            if args.operation == "status":
                return (True, outcome.upper())
            else:
                if outcome is False:
                    return (False, "Failed to send IPMI power operation")
                else:
                    return (True, "Command sent")
        elif code == requests.codes.not_found:
            return (False, "Host not in Foreman or without an IPMI interface (VM?)")
        else:
            return (False, "Uncontrolled status code (%s), please report a bug" %
                code)
    except AiToolsForemanError, error:
        return (False, error)

def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()
    parser.add_argument('-j', '--json',
        action="store_true",
        help="Produce JSON output")
    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-d', '--dryrun',
        action="store_true",
        help="Don't do the requests that alter data")
    parser.add_argument('-e', '--errors-only', dest="errors",
        action="store_true",
        help="Outputs errors only")
    add_common_foreman_args(parser)
    parser.add_argument('-t', '--threads', type=int,
        choices=xrange(1, (multiprocessing.cpu_count()*2)+1),
        help="Number of threads (default: #cores) (max: #cores*2)",
        default=multiprocessing.cpu_count())
    parser.add_argument('operation', nargs=1,
        help="Power operation to perform (%s)" % ", ".join(VALID_OPERATIONS)
        ).completer = ChoicesCompleter(VALID_OPERATIONS)
    parser.add_argument('hostname', nargs='+',
        help="One of more hostnames (qualified or not) separated by comma or blank"
        ).completer = ForemanCompleter()
    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    args.operation = args.operation[0]
    if args.operation not in VALID_OPERATIONS:
        parser.error("Operation '%s' not valid. See --help." % args.operation)
    return args

def process_fqdn(fqdn):
    logging.debug("Processing '%s'" % fqdn)
    fqdn_summary = {'fqdn': fqdn, 'success': False}

    if re.match(r".+?\.cern\.ch$", fqdn) is None:
        fqdn_summary['details'] = "Unable to resolve FQDN"
    else:
        foreman = ForemanClient(args.foreman_hostname, args.foreman_port,
            args.foreman_timeout, args.dryrun)
        fqdn_summary['success'], fqdn_summary['details'] = \
            foreman_power_operation(foreman, fqdn)

    return fqdn_summary

def main():
    """Application entrypoint"""
    global args
    args = parse_cmdline_args()
    configure_logging(args, default_lvl=DEFAULT_LOGGING_LEVEL)

    try:
        verify_kerberos_environment()
    except AiToolsInitError, error:
        logging.error("TGT not found or expired. Exiting...")
        return 4

    args.hostname = reduce(list.__add__, map(lambda x: x.split(','), \
        args.hostname), [])
    fqdns = map(socket.getfqdn, args.hostname)
    pool = multiprocessing.Pool(processes=args.threads)
    summary = pool.map(process_fqdn, fqdns)
    pool.close()
    pool.join()

    format_output(summary)

    failures = reduce(lambda x, y: x+1 if y['success'] is False else x, summary, 0)
    if failures:
        return 1
    return 0

if __name__ == '__main__':
    sys.exit(main())
