#!/usr/bin/env python
# This is a command line client to do disown hosts
# for further inspection by the sysadmins and procurement
# teams.
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>

# Exit codes:
#   0 all operations succeeded
#   1 some operations failed
#   2 bad command line
#   4 Kerberos TGT not found or expired
#  10 Landb authentication failed

import sys
import logging
import argparse
import argcomplete

from prettytable import PrettyTable

from aitools.foreman import ForemanClient
from aitools.roger import RogerClient
from aitools.landb import LandbClient
from aitools.config import ForemanConfig, RogerConfig
from aitools.config import LandbConfig

from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment
from aitools.common import fqdnify

from aitools.errors import AiToolsInitError, AiToolsForemanError
from aitools.errors import AiToolsLandbError
from aitools.errors import AiToolsRogerNotAllowedError

from aitools.completer import ForemanCompleter

# Read from conf?
DEFAULT_NEXT_OWNER = "sysadmin-team"
DEFAULT_NEXT_HOSTGROUP = "retirement/incoming"

def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()

    ##
    ## Common options
    ##

    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-d', '--dryrun',
        action="store_true",
        help="Don't execute actions that alter data")
    parser.add_argument('-o', '--owner', type=str,
        default=DEFAULT_NEXT_OWNER,
        help="LANDB resposible after disowning (default: '%s')" % \
            DEFAULT_NEXT_OWNER)
    parser.add_argument('-g', '--hostgroup', type=str,
        default=DEFAULT_NEXT_HOSTGROUP,
        help="Target hostgroup after disowning (default: '%s')" % \
            DEFAULT_NEXT_HOSTGROUP)
    parser.add_argument('hostname', nargs='+',
        help="One of more hostnames (qualified or not)").completer = \
            ForemanCompleter()
    ##
    ## Foreman options
    ##
    foreman_config = ForemanConfig()
    foreman_config.add_standard_args(parser)
    parser.add_argument('--foreman-disable', action="store_true",
        help="Disable Foreman actions")

    ##
    ## Roger options
    ##
    roger_config = RogerConfig()
    roger_config.add_standard_args(parser)
    parser.add_argument('--roger-disable', action="store_true",
        help="Disable Roger actions")

    ##
    ## Landb options
    ##
    landb_config = LandbConfig()
    landb_config.add_standard_args(parser)
    parser.add_argument('--landb-disable', action="store_true",
        help="Disable Landb actions")

    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    return args

def alarms(fqdn, roger):
    logging.info("Disabling alarms and setting appstate to \"disabled\"...")
    try:
        roger.update_or_create_state(fqdn, appstate="disabled", nc_alarmed="false",
            hw_alarmed="false", app_alarmed="false", os_alarmed="false",
            message="alarms disabled by ai-disownhost")
    except AiToolsRogerNotAllowedError, error:
        logging.error("Couldn't switch off Roger alarms, not authorized (%s)" % error)
    except Exception, error:
        logging.error("Received unexpected error trying to switch off alarms in roger: %s" % error)
        logging.info("Please update roger for machine to switch alarms off if necessary")

def disown(hostname, args, foreman, roger, landb, table):
    fqdn = fqdnify(hostname)
    if not fqdn:
        table.add_row([hostname, 'KO', "Couldn't fqdnify"])
        return 1

    logging.info("Starting disown procedure for %s...", fqdn)
    logging.debug("Getting current hostgroup...")
    try:
        host = foreman.gethost(fqdn, toexpand=[])
    except AiToolsForemanError, error:
        table.add_row([fqdn, 'KO', "Couldn't get current hostgroup (%s)" % error])
        return 2

    if not host['managed']:
        table.add_row([fqdn, 'KO', "Host is not managed (VM?)"])
        return 2

    old_hostgroup = host['hostgroup_name']
    logging.debug("Current hostgroup: %s", old_hostgroup)

    # 1. Hostgroup update
    if not args.foreman_disable:
        logging.info("Moving host to %s...", args.hostgroup)
        try:
            foreman.updatehost(fqdn, hostgroup=args.hostgroup)
        except AiToolsForemanError, error:
            table.add_row([fqdn, 'KO', "Couldn't change hostgroup (%s)" % error])
            return 3

    # 2. Disable alarms and change appstate
    if not args.roger_disable:
        # This is not essential, thus we continue if it fails
        alarms(fqdn, roger)

    # 3. Change LANDB reponsible
    if not args.landb_disable:
        logging.info("Changing LANDB responsible...")
        try:
            landb.change_responsible(fqdn, name=args.owner, firstname=None)
        except AiToolsLandbError, error:
            err_msg = "Couldn't change LANDB responsible (%s)" % error
            if not args.foreman_disable:
                logging.debug("Moving host back to %s...", old_hostgroup)
                try:
                    foreman.updatehost(fqdn, hostgroup=args.hostgroup)
                except AiToolsForemanError, error:
                    err_msg = "%s and couldn't move it back to origin hostgroup (%s)" % \
                        (err_msg, error)
            table.add_row([fqdn, 'KO', err_msg])
            return 4

    logging.info("Done")
    table.add_row([fqdn, 'OK', ':)'])
    return 0

def main():
    """Application entrypoint"""
    args = parse_cmdline_args()
    fconfig = ForemanConfig()
    fconfig.read_config_and_override_with_pargs(args)

    configure_logging(args)

    try:
        krb_principal = verify_kerberos_environment()
    except AiToolsInitError:
        logging.error("TGT not found or expired. Exiting...")
        return 4

    foreman = ForemanClient(dryrun=args.dryrun,
        deref_alias=args.dereference_alias)
    roger = RogerClient(dryrun=args.dryrun,
        deref_alias=args.dereference_alias)
    try:
        landb = LandbClient(dryrun=args.dryrun,
            username=krb_principal.replace("@CERN.CH", ""),
            password=None)
    except AiToolsLandbError, error:
        logging.error("Failed to initialize the Landb client (%s)", error)
        return 10

    failures = False
    table = PrettyTable(['FQDN/Hostname', 'Status', 'Details'])
    for hostname in args.hostname:
        if disown(hostname, args, foreman, roger, landb, table) > 0:
           failures = True
    print table

    return 1 if failures else 0

if __name__ == '__main__':
    sys.exit(main())
