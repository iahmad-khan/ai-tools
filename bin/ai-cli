#!/usr/bin/env python
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>

# Exit codes:
#   0 all operations succeeded
#   2 bad command line
#   4 Kerberos TGT not found or expired

import sys
import logging
import argparse
import argcomplete
import csv
import socket
from dateutil import tz
from dateutil import parser
from prettytable import PrettyTable

from aitools.foreman import ForemanClient

from aitools.config import ForemanConfig
from aitools.common import configure_logging
from aitools.common import verify_kerberos_environment
from aitools.common import fqdnify

from aitools.errors import AiToolsInitError, AiToolsForemanError
from aitools.errors import AiToolsAiForemanError

from aitools.completer import ForemanCompleter

SUMMARY_TABLE_FIELDS = ['Name', 'Hostgroup', 'Environment',
        'OS', 'Model', 'Ptable', 'Last Report']
SUMMARY_TABLE_DEFAULT_SORT_KEY = 'Name'
COMMON_MODEL_OPTIONS = [
    {'short': '-e', 'long': '--environment',
        'help': "Host's environment"},
    {'short': '-c', 'long': '--hostgroup',
        'help': "Host's hostgroup"},
    {'short': '-a', 'long': '--architecture',
        'help': "Host's architecture"},
    {'short': '-p', 'long': '--ptable',
        'help': "Host's partition table"},
    {'short': '-o', 'long': '--operatingsystem',
        'help': "Host's operating system name"},
]

def parse_cmdline_args():
    """Parses and validates cmdline arguments"""
    parser = argparse.ArgumentParser()

    ##
    ## Common options
    ##

    parser.add_argument('-v', '--verbose',
        action="store_true",
        help="Be chatty")
    parser.add_argument('-d', '--dryrun',
        action="store_true",
        help="Don't execute actions that alter data")
    filter_group = parser.add_mutually_exclusive_group()
    filter_group.add_argument('-f', '--filter', type=str,
        help="Host discovery based on a Foreman search filter")
    filter_group.add_argument('-g', '--hg', type=str,
        help="Prints hosts in the given hostgroup. Overwrites -f.")
    parser.add_argument('-s', '--sort', type=str,
        choices=SUMMARY_TABLE_FIELDS,
        default=SUMMARY_TABLE_DEFAULT_SORT_KEY,
        help="Field name to sort by (default: '%s')" % \
            SUMMARY_TABLE_DEFAULT_SORT_KEY)

    foreman_config = ForemanConfig()
    foreman_config.add_standard_args(parser)

    subparsers = parser.add_subparsers(dest="subcommand")

    ##
    ## Addhost
    ##

    addhost_parser = subparsers.add_parser('addhost')
    for option in COMMON_MODEL_OPTIONS:
        addhost_parser.add_argument(option['short'], option['long'],
            type=str, help=option['help'], required=True)
    addhost_parser.add_argument('--comment', type=str,
        help="Host's comment", default=None)
    addhost_parser.add_argument('-r', '--reset',
        help="Delete before create", action='store_true')
    addhost_parser.add_argument('-i', '--input', nargs='?',
        type=argparse.FileType('r'), default=sys.stdin)

    ##
    ## Delhost
    ##

    delhost_parser = subparsers.add_parser('delhost')
    delhost_parser.add_argument('-y', '--yes',
        help="Answer yes to all questions asked", action='store_true')
    delhost_parser.add_argument('hostname', nargs='*',
        help="Zero of more hostnames (qualified or not)").completer = \
            ForemanCompleter()

    ##
    ## Showhost
    ##

    showhost_parser = subparsers.add_parser('showhost')
    showhost_parser.add_argument('hostname', nargs='*',
        help="Zero of more hostnames (qualified or not)").completer = \
            ForemanCompleter()

    ##
    ## Updatehost
    ##

    updatehost_parser = subparsers.add_parser('updatehost')
    updatehost_parser.add_argument('-y', '--yes',
        help="Answer yes to all questions asked", action='store_true')
    for option in COMMON_MODEL_OPTIONS:
        updatehost_parser.add_argument(option['short'], option['long'],
            type=str, help=option['help'])
    updatehost_parser.add_argument('--comment', type=str,
        help="Host's comment", default=None)
    updatehost_parser.add_argument('-i', '--ip', type=str,
        help="Host's IP address", default=None)
    updatehost_parser.add_argument('-m', '--mac', type=str,
        help="Host's MAC address", default=None)
    updatehost_parser.add_argument('hostname', nargs='*',
        help="Zero of more hostnames (qualified or not)").completer = \
            ForemanCompleter()

    argcomplete.autocomplete(parser)
    try:
        args = parser.parse_args()
    except IOError, error:
        parser.exit(1, str(error))

    return args

##
## Main functions, one per subparser
##

def addhost(foreman, args):
    ipmi_fieldnames = ['i_mac', 'i_user', 'i_pass']
    fieldnames = ['fqdn', 'ip', 'mac']
    fieldnames.extend(ipmi_fieldnames)
    reader = csv.DictReader(args.input, fieldnames=fieldnames)
    for record in reader:
        if args.reset:
            try:
                foreman.delhost(record['fqdn'])
                logging.info("Done")
            except AiToolsForemanError, error:
                logging.warn("Failed to delete '%s': %s (will continue)" \
                    % (record['fqdn'], error))
        try:
            logging.debug("Adding '%s'" % record['fqdn'])
            foreman.addhost(fqdn=record['fqdn'],
                environment=args.environment,
                hostgroup=args.hostgroup,
                owner=args.krb_principal.replace("@CERN.CH", ""),
                managed=True,
                operatingsystem=args.operatingsystem,
                architecture=args.architecture,
                comment=args.comment,
                ptable=args.ptable,
                ip=record['ip'],
                mac=record['mac'])
        except AiToolsForemanError, error:
            logging.error("Couldn't add '%s': %s" % (record['fqdn'], error))

        if all(record[f] is not None for f in ipmi_fieldnames):
            try:
                foreman.add_ipmi_interface(record['fqdn'], record['i_mac'],
                    record['i_user'], record['i_pass'])
            except (socket.gaierror, AiToolsForemanError), error:
                logging.error("Couldn't add %s's IPMI iface': %s" % \
                    (record['fqdn'], error))

def delhost(foreman, args):
    try:
        data = get_hosts_by_filter_and_explicit_list(foreman, args)
    except AiToolsAiForemanError, error:
        logging.warn(error)
        return

    logging.info("The following hosts will be deleted:")
    table = generate_summary_table_from_data(data)
    print table.get_string(sortby=args.sort)

    if not user_confirms(args):
        return

    for host in data:
        try:
            foreman.delhost(host['name'])
            logging.info("Done")
        except AiToolsForemanError, error:
            logging.warn("Failed to delete '%s': %s" % (fqdn, error))

def showhost(foreman, args):
    try:
        data = get_hosts_by_filter_and_explicit_list(foreman, args)
    except AiToolsAiForemanError, error:
        logging.warn(error)
        return

    table = generate_summary_table_from_data(data)
    print table.get_string(sortby=args.sort)

def updatehost(foreman, args):
    try:
        data = get_hosts_by_filter_and_explicit_list(foreman, args)
    except AiToolsAiForemanError, error:
        logging.warn(error)
        return

    logging.info("The following hosts will be updated:")
    table = generate_summary_table_from_data(data)
    print table.get_string(sortby=args.sort)

    if not user_confirms(args):
        return

    candidates = [x['long'].replace('--', '') for x in COMMON_MODEL_OPTIONS]
    candidates.extend(['ip', 'mac'])
    to_update = dict([(k, getattr(args, k)) for k in candidates])

    for host in data:
        try:
            foreman.updatehost(host['name'], **to_update)
        except AiToolsForemanError, error:
            logging.warn("Failed to update '%s': %s" % (host['name'], error))

##
## Helper functions
##

def get_hosts_by_filter_and_explicit_list(foreman, args):
    data = []
    if args.hg:
        args.filter = "hostgroup_fullname = %s" % args.hg

    if args.filter:
        logging.debug("Searching for hosts matching '%s'" % args.filter)
        data.extend(foreman.search_query("hosts", args.filter))

    if args.hostname:
        found = [host['name'] for host in data]
        logging.debug("Gathering information for: %s" % ", ".join(args.hostname))
        for fqdn in args.hostname:
            if fqdn in found:
                continue
            try:
                data.append(foreman.gethost(fqdn, toexpand=[]))
            except AiToolsForemanError:
               logging.warn("Host '%s' not found" % fqdn)

    if not data:
        raise AiToolsAiForemanError("No results found")

    return data

def generate_summary_table_from_data(data):
    table = PrettyTable(SUMMARY_TABLE_FIELDS)
    table.align = 'l'
    for host in data:
        last_report = None
        if host['last_report']:
          last_report = parser.parse(host['last_report'])
          last_report = last_report.astimezone(tz.tzlocal())
        table.add_row([
            host['name'],
            host['hostgroup_name'],
            host['environment_name'],
            host['operatingsystem_name'],
            host['model_name'],
            host['ptable_name'],
            last_report])

    return table

def user_confirms(args):
    if not args.yes:
        user = raw_input("Please type YES and press enter: ")
        if user != 'YES':
            logging.info("Cancelling")
            return False
    return True

def main():
    """Application entrypoint"""
    args = parse_cmdline_args()
    fconfig = ForemanConfig()
    fconfig.read_config_and_override_with_pargs(args)

    configure_logging(args)

    try:
        args.krb_principal = verify_kerberos_environment()
    except AiToolsInitError, error:
        logging.error("TGT not found or expired. Exiting...")
        return 4

    foreman = ForemanClient(dryrun=args.dryrun,
        deref_alias=args.dereference_alias)

    globals()[args.subcommand](foreman, args)

    return 0

if __name__ == '__main__':
    sys.exit(main())
