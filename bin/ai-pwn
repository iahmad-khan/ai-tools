#!/usr/bin/python

from argparse import ArgumentParser
import argcomplete

from aitools.errors import AiToolsPwnError

try:
    import simplejson as json
except ImportError:
    import json
import logging
import sys
from aitools.pwn import PwnClient
from aitools.config import PwnConfig, AiConfig
from aitools.common import configure_logging

logger = logging.getLogger(__name__)


OPERATION_CHOICES = {'set': 'update_or_create_ownership',
    'show': 'get_ownership',
    'delete': 'delete_ownership',
    'add': 'add_owners',
    'remove': 'remove_owners'}

SCOPE_CHOICES = ['hostgroup', 'module']

def pwn(pargs):
    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)
    configure_logging(pargs)
    args = {"entity": pargs.entity, "scope":pargs.scope, "options": pargs.options}
    if pargs.owners:
        args["owners"] = pargs.owners
    if pargs.operation in ['show', 'delete']:
        del(args['options'])
    try:
        pwn_client = PwnClient(show_url=pargs.show_url, dryrun=pargs.dryrun,
            deref_alias=pargs.dereference_alias)
        result = getattr(pwn_client, OPERATION_CHOICES[pargs.operation])(**args)
        if pargs.operation == 'show':
            print json.dumps(result, sort_keys=True, indent=5, separators=(',', ': '))
        else:
            logging.info("Ownership operation %s successful for %s '%s'" %
                (pargs.operation, pargs.scope, pargs.entity))
    except AiToolsPwnError as e:
        logging.error(e)
        sys.exit(3)

def main():
    parser = ArgumentParser(description="Tool for setting hostgroup/module ownership")

    pwn_config = PwnConfig()
    pwn_config.add_standard_args(parser)

    parser.add_argument("operation", choices=OPERATION_CHOICES.keys(),
                    help="The operation to be carried out")
    parser.add_argument("scope", choices=SCOPE_CHOICES,
                    help="Whether the operation is done for a hostgroup or a module")
    parser.add_argument("entity", metavar="ENTITY",
                    help="The name for the hostgroup/module")
    parser.add_argument("--options", metavar="OPTIONS",
                    help="Extra options, in JSON format, only for SET", type=json.loads)
    parser.add_argument("--owners", metavar="OWNER", nargs="+",
                    help="Owner entity (account or egroup) for set, add, remove operations")
    parser.add_argument("--show_url", action="store_true", default=False, dest="show_url",
                    help="show REST urls")
    parser.add_argument('-v', '--verbose',
                        action="store_true", help="Be chatty")
    parser.add_argument('-d', '--dryrun',
                        action="store_true", help="Don't do the requests that alter data")

    argcomplete.autocomplete(parser)

    pargs = parser.parse_args()
    if pargs.operation in ['show', 'delete'] and pargs.owners:
        parser.error('Ownership information only needed for set, add, and remove operations')
    if pargs.operation in ['set', 'add', 'remove'] and not pargs.owners:
        parser.error('Ownership information is needed for set, add, and remove operations')
    if pargs.operation != 'set' and pargs.options:
        parser.error('Options can only be provided for set')
    if pargs.entity in ['module', 'hostgroup']:

        parser.error('Invalid entity name "%s"'%pargs.entity)
    pwn(pargs)

if __name__ == "__main__":
    main()
