#!/bin/bash
# This script helps to bootstrap a puppet-managed
# Foreman-enabled Openstack VM
# Authors:
#  Nacho Barrientos <nacho.barrientos@cern.ch>
# Notes:
#  - This script is meant to be wrapped by ai-bs-pet
#    and ai-bs-cattle in the near future.

# Exit codes:
#  0 success
#  1 user input failed
#  20 Host staging failed
#  30 VM creation failed
#  50 Other errors

# Notes:
# certmgr-stage will fail if you're not member of ai-admins egroup

function dieiffail {
  if [ $1 -ne 0 ]; then
    if [ ! -z $AIBS_VMUSERDATA_PATH -a -e $AIBS_VMUSERDATA_PATH ]; then
      rm -f $AIBS_VMUSERDATA_PATH
    fi
    echo "$2";
    exit $3;
  fi
}

function usage {
  echo "Usage: $0 <pet|cattle> vmname"
  echo "Note: Only 'pet' VM type is supported at the moment"
  exit 1
}


if [ -z $AIBS_HOSTGROUP_NAME ]; then
  echo "Hostgroup name must be specified via AIBS_HOSTGROUP_NAME environment variable."
  echo "Examples: 'spare', 'myhostgroup/spare', 'lxbatch/workers/spare'"
  echo "More info: 'man $0'. Exiting..."
  exit 1
fi

echo $AIBS_HOSTGROUP_NAME | egrep -q "^([-A-Za-z0-9_]+(/[-A-Za-z0-9_]+)*/spare|spare)$"
dieiffail $? "Invalid hostgroup (examples: 'spare', 'a/spare', 'a/b/spare'). Exiting" 1;

if [ -z $OS_USERNAME ]; then
  echo "No OpenStack credentials found. Please source openrc.sh."
  echo "More info: 'man $0'. Exiting..."
  exit 1
fi

## Cmdline validation

# Legacy checks for backwards compatibily (to be removed in the future)
echo $1 | egrep -q "^pet|cattle$" && shift

# VM name (must to follow RFC 1123 rules)
if [ -z $1 ]; then
  AIBS_VMNAME="$AIBS_VMNAME_PREFIX$(date +%s | sha1sum | cut -c -8)"
else
  AIBS_VMNAME=$(echo $1 | sed -e 's/\.cern\.ch$//g')
fi
echo $AIBS_VMNAME | egrep -q "^[a-zA-Z0-9][a-zA-Z0-9\-]*$"
dieiffail $? "Invalid hostname. See RFC 1123"
[[ $(echo -n $AIBS_VMNAME | wc -c) -lt 61 ]]
dieiffail $? "Hostname \"$AIBS_VMNAME.cern.ch\" is too long (limit: 60 characters)"

# Puppet environment
# (default: 6 -- "devel"
AIBS_ENVIRONMENT_NAME=${AIBS_ENVIRONMENT_NAME:-"production"}

# VM flavor
# (default: 'm1.small')
AIBS_VMFLAVOR_NAME=${AIBS_VMFLAVOR_NAME:-"m1.small"}

# VM Image
# (default: "SLC6 Server - x86_64"
AIBS_VMIMAGE_NAME=${AIBS_VMIMAGE_NAME:-"SLC6 Server - x86_64"}

# VM security groups
# (default: "default")
# Comma-separed list of security groups
AIBS_SECURITYGROUPS_LIST=${AIBS_SECURITYGROUPS_LIST:-"default"}

# VM metaparameters
METAPARAMS=""
if [ -n "${AIBS_METAPARAMETERS_LIST}" ]; then
  for METAPARAM in ${AIBS_METAPARAMETERS_LIST}; do
    [[ $METAPARAM =~ ^[[:alnum:]_-]+=[[:alnum:]_-]+$ ]]
    dieiffail $? "Wrong metaparam: $METAPARAM; it must be in form key=value" 1
    METAPARAMS="${METAPARAMS} --meta $METAPARAM"
  done
fi

# Susie host
# (default: "aisusie.cern.ch")
AIBS_SUSIE_HOSTNAME=${AIBS_SUSIE_HOSTNAME:-"aisusie.cern.ch"}

# Susie port
# (default: "443")
AIBS_SUSIE_PORT=${AIBS_SUSIE_PORT:-"443"}

# VM base userdata
AIBS_VMBASEUSERDATA_PATH=${AIBS_VMBASEUSERDATA_PATH:-"/usr/share/ai-tools/userdata/common"}

# Puppet master hostname
AIBS_PUPPETMASTER_HOSTNAME=${AIBS_PUPPETMASTER_HOSTNAME:-"lxbsp2702.cern.ch"}

# CA server hostname
AIBS_CASERVER_HOSTNAME=${AIBS_CASERVER_HOSTNAME:-"baby01.cern.ch"}

echo "Trying to bootstrap '$AIBS_VMNAME'..."
echo "VM flavor: $AIBS_VMFLAVOR_NAME"
echo "VM image: $AIBS_VMIMAGE_NAME"
echo "VM security groups: $AIBS_SECURITYGROUPS_LIST"
echo "VM tenant: $OS_TENANT_NAME"
[[ ! -z $AIBS_METAPARAMETERS_LIST ]] && echo "VM metaparameters: $AIBS_METAPARAMETERS_LIST"
[[ ! -z $AIBS_SSHKEY_NAME ]] && echo "VM SSH key name: $AIBS_SSHKEY_NAME"
[[ ! -z $AIBS_VMAVAILZONE_NAME ]] && echo "VM availability zone: $AIBS_VMAVAILZONE_NAME"
echo "Foreman environment: $AIBS_ENVIRONMENT_NAME"
echo "Foreman hostgroup: $AIBS_HOSTGROUP_NAME"
echo "Puppet master: $AIBS_PUPPETMASTER_HOSTNAME"
echo "CA server: $AIBS_CASERVER_HOSTNAME"
echo "Susie instance: $AIBS_SUSIE_HOSTNAME"

#
# User data generation
#

echo "Preparing dynamic user data..."
echo "Using $AIBS_VMBASEUSERDATA_PATH as template"
AIBS_VMUSERDATA_PATH=$(mktemp)
rm $AIBS_VMUSERDATA_PATH
cp $AIBS_VMBASEUSERDATA_PATH $AIBS_VMUSERDATA_PATH
sed -i -e "s,%FOREMAN_HOSTGROUP%,$AIBS_HOSTGROUP_NAME,g" $AIBS_VMUSERDATA_PATH
sed -i -e "s/%FOREMAN_ENVIRONMENT%/$AIBS_ENVIRONMENT_NAME/g" $AIBS_VMUSERDATA_PATH
sed -i -e "s/%SUSIE_HOST%/$AIBS_SUSIE_HOSTNAME/g" $AIBS_VMUSERDATA_PATH
sed -i -e "s/%SUSIE_PORT%/$AIBS_SUSIE_PORT/g" $AIBS_VMUSERDATA_PATH
sed -i -e "s/%PUPPETMASTER_HOSTNAME%/$AIBS_PUPPETMASTER_HOSTNAME/g" $AIBS_VMUSERDATA_PATH
sed -i -e "s/%CASERVER_HOSTNAME%/$AIBS_CASERVER_HOSTNAME/g" $AIBS_VMUSERDATA_PATH
echo "Done"

#
# Host staging if pet VM
#

if [ $VMTYPE == "vmtype_pet" ]; then
  echo "Staging host on certmgr..."
  certmgr-stage --host $AIBS_VMNAME.cern.ch
  dieiffail $? "Failed to stage host. Exiting" 20;
fi

#
# VM spawning
#

echo "Host staged. Spawning VM..."
nova boot --flavor $AIBS_VMFLAVOR_NAME --image "$AIBS_VMIMAGE_NAME" \
  $([[ ! -z $AIBS_VMAVAILZONE_NAME ]] &&
    echo "--availability-zone $AIBS_VMAVAILZONE_NAME") \
  $([[ ! -z $AIBS_SSHKEY_NAME ]] &&
    echo "--key-name $AIBS_SSHKEY_NAME") \
  --user-data $AIBS_VMUSERDATA_PATH \
  --security-groups $AIBS_SECURITYGROUPS_LIST \
  $METAPARAMS $AIBS_VMNAME

if [ $? -ne 0 ]; then
  if [ $VMTYPE == "vmtype_pet" ]; then
    echo "Failed to create VM. Unstaging host...";
    certmgr-stage --unstage --host $AIBS_VMNAME.cern.ch
    dieiffail $? "Unstage process failed." 50
    exit 30
  fi
fi

rm -f $AIBS_VMUSERDATA_PATH

echo "Your machine is booting and the network is being configured right now."
echo "It will show up in Foreman after a successful boot process and Puppet"
echo "will run immediately."
echo "In case of problems, if you provided a SSH key when creating the VM"
echo "use it to log into the box and take a look at /var/log/boothook.log"

exit 0
