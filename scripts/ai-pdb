#!/usr/bin/python

from argparse import ArgumentParser
import os
import argcomplete

from urllib import urlencode
try:
    import simplejson as json
except ImportError:
    import json
from aitools.pdb import PdbClient
from aitools.config import PdbConfig, AiConfig
from aitools.completer import ForemanCompleter
from aitools.common import fqdnify

def raw_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)

    query = None
    if pargs.query:
        if pargs.query.startswith("query="):
            q = pargs.query.lstrip("query=") 
        else:
            q = pargs.query
        if not q.startswith("["):
            q = "[" + q
        if not q.endswith("["):
            q += "]"
        query = urlencode({"query": q})

    pdb = PdbClient(show_url=pargs.show_url, deref_alias=pargs.dereference_alias)
    if query:
        path = "%s?%s" % (pargs.endpoint, query)
    else:
        path = "%s" % pargs.endpoint
    (code, j) = pdb.raw_request(path)

    print json.dumps(j, sort_keys=True, indent=5, separators=(',', ': '))


def hg_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)

    endpoint = "/v3/facts/hostgroup"
    if pargs.subgroups:
        op = "~"
        hg = "^(?=%s)|(?=%s/.*)" % (pargs.hostgroup, pargs.hostgroup)
    else:
        op = "="
        hg = pargs.hostgroup
    query = urlencode({"query": '["%s", "value", "%s"]' % (op, hg)})

    pdb = PdbClient(show_url=pargs.show_url)
    (code, j) = pdb.raw_request("%s?%s" % (endpoint,query))

    res = list()
    for entry in j:
        entry["hostgroup"] = entry.pop("value")
        del(entry['name'])
        res.append(entry)
    res = sorted(res, key=lambda k: k["hostgroup"])
    if pargs.plain:
        for h in res:
            print h['certname']
    else:
        print json.dumps(res, sort_keys=True, indent=5, separators=(',', ': '))


def facts_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)

    fqdn = fqdnify(pargs.hostname)

    if pargs.fact:
        factoid = "/%s" % pargs.fact
    else:
        factoid = ""

    endpoint = "/v3/nodes/%s/facts%s" % (fqdn, factoid)

    pdb = PdbClient(show_url=pargs.show_url)
    (code, j) = pdb.raw_request("%s?" % (endpoint,))

    print json.dumps(j, sort_keys=True, indent=5, separators=(',', ': '))

def main():
    parser = ArgumentParser(description="wrap puppetdb commands")

    pdb_config = PdbConfig()
    pdb_config.add_standard_args(parser)

    parser.add_argument("--show_url", action="store_true", default=False, dest="show_url",
                        help="show REST urls")
    subparsers = parser.add_subparsers()

    raw_parser = subparsers.add_parser("raw", help="raw puppetdb queries")
    raw_parser.add_argument("endpoint", metavar="URI", help="REST endpoint for puppetdb api (include version!)")
    raw_parser.add_argument("--query", metavar="QUERY", dest="query",
                            help="puppetdb query string")
    raw_parser.set_defaults(func=raw_main)

    hg_parser = subparsers.add_parser("hostgroup", help="get hostgroup members")
    hg_parser.add_argument("hostgroup", metavar="HG", help="hostgroup string")
    hg_parser.add_argument("--subgroups", action="store_true", default=False, dest="subgroups",
                            help="return nodes from subgroups")
    hg_parser.add_argument("--plain", action="store_true", default=False, dest="plain",
                            help="output a plain, unformatted list of hostnames")
    hg_parser.set_defaults(func=hg_main)

    hgfacts_parser = subparsers.add_parser("hostgroup_fact", help="query a single fact across a hostgroup")
    hgfacts_parser.add_argument("hostgroup", metavar="HG", help="hostgroup string")
    hgfacts_parser.add_argument("fact", metavar="FACT", help="fact")
    hgfacts_parser.add_argument("--subgroups", action="store_true", default=False, dest="subgroups",
                            help="return facts for nodes from subgroups")
    hgfacts_parser.set_defaults(func=hgfacts_main)

    facts_parser = subparsers.add_parser("facts", help="get facts for a node")
    facts_parser.add_argument("hostname", metavar="HOST", help="hostname to fetch facts for").completer = ForemanCompleter()
    facts_parser.add_argument("--fact", help="specific fact to fetch", default=None)
    argcomplete.autocomplete(parser)
    facts_parser.set_defaults(func=facts_main)
    pargs = parser.parse_args()
    pargs.func(pargs)

if __name__ == "__main__":
    main()
