#!/usr/bin/env python
# This is a helper script that creates a YAML
# enviroment definition file.
# Prerequesites:
# - The script is executed inside of a clone of
#   it-puppet-enviroments
#   https://:@gitlab.cern.ch:8443/ai/it-puppet-environments.git
# Nacho Barrientos <nacho.barrientos@cern.ch>

import sys
import os
import optparse
import argparse
import logging
import yaml
import re
import datetime
import time

from aitools.git import GitClient

DEFAULT_LOGGING_LEVEL = logging.INFO
ENVIRONMENTS_PATH = '/mnt/puppetnfsdir/environments'

class OverrideError(Exception):
    pass

def parse_cmdline_args():
    """Parses command line parameters."""
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    parser.add_argument('-e', '--environment', required=True,
        help="Name of the new environment")
    parser.add_argument('-n', '--notifications', required=True,
        help="Email address to notify problems with the environment")
    parser.add_argument('-m', '--module', action="append",
        help="Overrides a module (syntax module:branch)")
    parser.add_argument('-g', '--hostgroup', action="append",
        help="Overrides a hostgroup (syntax hostgroup:branch)")
    group.add_argument('-d', '--default',
        help="Default branch (defaults to master).",
        default="master")
    group.add_argument('-s', '--snapshot',
        help="Creates snapshot based on the specified environment")
    parser.add_argument("-v", action="store_true", default=False, \
        dest="verbose", help="Enable debug messages")
    opts = parser.parse_args()
    return opts

def configure_logging(verbose):
    logging_level = DEFAULT_LOGGING_LEVEL
    format = "%(message)s"
    if verbose:
        logging_level = logging.DEBUG
    logging.basicConfig(level=logging_level,
        format=format)

def split_override(override):
    split = re.match(r"(?P<element>[^:]+?):(?P<branch>[^:]+)", override)
    if split is None:
        logging.error("Malformed module override (%s)" % override)
        raise OverrideError(override)
    return (split.group("element"), split.group("branch"))

def fill_snapshot(base, environment):
    git = GitClient()
    for module in os.listdir('%s/modules' % base):
        repository_path = '%s/modules/%s' % (base, module)
        if os.path.exists(repository_path):
            repository_path = "%s/../.git" % os.path.realpath(repository_path)
            environment['overrides']['modules'][module] = \
                format_commit_hash(git, repository_path)

    for hostgroup in os.listdir('%s/hostgroups' % base):
        hostgroup_name = hostgroup.replace('hg_', '')
        repository_path = '%s/hostgroups/%s' % (base, hostgroup)
        if os.path.exists(repository_path):
            repository_path = "%s/../.git" % os.path.realpath(repository_path)
            environment['overrides']['hostgroups'][hostgroup_name] = \
                format_commit_hash(git, repository_path)

    repository_path = '%s/site' % base
    if os.path.exists(repository_path):
        repository_path = "%s/../.git" % os.path.realpath(repository_path)
        environment['overrides']['common']['site'] = \
            format_commit_hash(git, repository_path)

    repository_path = '%s/hieradata/environments' % base
    if os.path.exists(repository_path):
        repository_path = "%s/../../.git" % os.path.realpath(repository_path)
        environment['overrides']['common']['hieradata'] = \
            format_commit_hash(git, repository_path)

def format_commit_hash(git, repository_path):
    return "commit/%s" % git.get_head(repository_path)

def main():
    """Application entrypoint."""
    opts = parse_cmdline_args()

    configure_logging(opts.verbose)

    if not os.path.exists("production.yaml"):
        logging.error("Current directory does not look like \
a clone of it-puppet-environments")
        logging.error("git clone \
https://:@gitlab.cern.ch:8443/ai/it-puppet-environments.git")
        return 3

    if os.path.exists(opts.environment + ".yaml"):
        logging.error("Environment '%s' already exists\n" %
            opts.environment)
        return 4

    if re.match(r"^\w+$", opts.environment) is None:
        logging.error("Environment names must contain only alphanumeric \
characters and underscore")
        return 5

    opts.environment = opts.environment.lower()
    logging.info("Creating environment '%s'..." % opts.environment)

    environment = {'notifications': opts.notifications}

    if not opts.snapshot:
        environment['default'] = opts.default

    if opts.snapshot:
        logging.info("This environment seems to be a snapshot (this may take a while).")
        base = "%s/%s" % (ENVIRONMENTS_PATH, opts.snapshot)
        if not os.path.isdir(base):
            logging.error("Base environment '%s' not found. Stopping :(" \
                % opts.snapshot)
            return 9
        environment['overrides'] = {'modules': {}, 'hostgroups': {}, 'common': {}}
        fill_snapshot(base, environment)

    if opts.module:
        if not 'overrides' in environment:
            environment['overrides'] = {'modules': {}}
        for module_override in opts.module:
            try:
                module, branch = split_override(module_override)
            except OverrideError:
                return 6
            environment['overrides']['modules'][module] = branch

    if opts.hostgroup:
        if not 'overrides' in environment:
            environment['overrides'] = {'hostgroups': {}}
        else:
            environment['overrides']['hostgroups'] = {}
        for hostgroup_override in opts.hostgroup:
            try:
                hostgroup, branch = split_override(hostgroup_override)
            except OverrideError:
                return 7
            environment['overrides']['hostgroups'][hostgroup] = branch

    try:
        environment_file = open(opts.environment + ".yaml", "w")
    except OSError:
        logging.error("Unable to open %s for writing" % 
            opts.environment + ".yaml")
        return 8

    if opts.snapshot:
        environment_file.write("# Snapshot created on %s based on %s\n" %
            (datetime.datetime.now(), opts.snapshot))
    environment_file.write("---\n")
    yaml.dump(environment, environment_file, default_flow_style=False)

    environment_file.close()

    logging.info("Done.")

    if opts.module or opts.hostgroup:
        logging.info("IMPORTANT: Please note that you're overriding \
some modules/hostgroups:")
        logging.info("Please make sure that the specified branches \
exist in the corresponding repositories before pushing the new environment.")

    if opts.default is not None and opts.default not in ("master", "qa"):
        logging.info("IMPORTANT: You're using an unconventional \
branch as default ('%s')." % opts.default)
        logging.info("Make sure that all modules and hostgroups \
have that branch.")

    if opts.snapshot is not None and opts.snapshot not in ('production', 'qa'):
        logging.info("IMPORTANT: You're basing your snapshot on a unconventional \
environment ('%s')." % opts.snapshot)

    logging.info("To publish the changes please execute:")
    suggested_branch_name = str(int(time.time()))
    logging.info("\tgit checkout -b %s" % suggested_branch_name)
    logging.info("\tgit add %s.yaml && git commit -m \"Add environment %s\"" % \
        (opts.environment, opts.environment))
    logging.info("\tgit push origin %s" % suggested_branch_name)
    logging.info("And open a merge request by visiting the link that's")
    logging.info("coming from the server after pushing.")

if __name__ == '__main__':
    sys.exit(main())
