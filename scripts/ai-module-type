#!/usr/bin/python
# CERN
# IT Department
# Nacho Barrientos <nacho.barrientos@cern.ch>
# This script determines via PuppetDB the type of 
# a module passed as parameter. Return codes:
#  - 01: Error
#  - 10: Module is core or shared
#  - 11: Module is individual
#  - 12: Module is not affecting any top-level hostgroups
# May 2013

import sys
import argparse
import logging
import requests

from aitools.pdb import PdbClient
from aitools.errors import AiToolsPdbError
from aitools.config import PdbConfig, AiConfig

CONFIG_DEFAULT_DEBUG_LEVEL = logging.ERROR
HOSTGROUPS_BLACKLIST = ["training", "playground"]

class AiToolsModuleTypeError(Exception):
    pass

def enum(**enums):
    return type('Enum', (), enums)

def parse_args():
    parser = argparse.ArgumentParser()
    PdbConfig.add_standard_args(parser)
    parser.add_argument('--module', type=str, required=True, 
        help="Concerned module name")
    parser.add_argument('--verbose', '-v', action='store_true',
        help="Enable debugging")
    parser.add_argument('--silent', '-s', action='store_true',
        help="Display only error messages")
    return parser.parse_args()

def configure_logging(args):
    level = CONFIG_DEFAULT_DEBUG_LEVEL
    format = '%(message)s'
    if args.verbose:
        level = logging.DEBUG
        format = '%(asctime)s %(levelname)s %(message)s'
    if args.silent:
        level = logging.ERROR
    logging.basicConfig(
        level = level,
        format = format)

def get_toplevel_affected_hgs(modulename):
    logging.info("Getting count of top-level hostgroups using module '%s'..." % modulename)
    modulename = "%s%s" % (modulename[0].upper(), modulename[1:].lower())

    pdb = PdbClient()
    query = """
["and",["=","name","hostgroup_0"], 
["in","certname",["extract","certname", 
["select-resources", ["and",["=", "type", "Class"],
["~","title","^%s"]]]]]]
""" % modulename
    logging.debug(query)

    try:
        code, body = pdb.raw_request("v3/facts", query)
    except AiToolsPdbError, error:
        raise AiToolsModuleTypeError("PuppetDB: %s" % error)

    if code == requests.codes.ok:
        hostgroups = set(map(lambda x: x['value'], body))
        return hostgroups
    else:
        raise AiToolsModuleTypeError("PuppetDB didn't return 200 (%d)" % code)


def main():
    args = parse_args()
    config = AiConfig()
    config.read_config_and_override_with_pargs(args)

    configure_logging(args)

    try:
        toplevel_affected_hostgroups = \
            get_toplevel_affected_hgs(args.module)
    except Exception, error:
        logging.error("Failed to get data from Puppet DB (%s)" % error)
        sys.exit(1)

    for hostgroup in HOSTGROUPS_BLACKLIST:
        if hostgroup in toplevel_affected_hostgroups:
            logging.info("Removing %s on purpose" % hostgroup)
            toplevel_affected_hostgroups.remove(hostgroup)

    print "Affected hostgroups: %s" % sorted(toplevel_affected_hostgroups)
    if len(toplevel_affected_hostgroups) > 1:
        print "More than one top-level hostgroup affected => shared"
        sys.exit(10)
    elif len(toplevel_affected_hostgroups) == 1:
        print "Only one top-level hostgroup affected => individual"
        sys.exit(11)
    else:
        print "No hostgroups are using this module"
        sys.exit(12)

if __name__ == "__main__":
    main()
