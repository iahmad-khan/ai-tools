#!/usr/bin/python

try:
    import simplejson as json
except ImportError:
    import json
import yaml
import os
import sys
import urllib2
import iso8601
import datetime
import pytz
import humanize
import teigi.rogerclient
import prettytable
import argcomplete
import textwrap

from argparse import ArgumentParser
from aitools.common import fqdnify
from aitools.common import verify_kerberos_environment
from aitools.completer import ForemanCompleter
from aitools.config import ForemanConfig, PdbConfig, EncConfig, AiConfig, RogerConfig
from aitools.pdb import PdbClient
from aitools.enc import EncClient
from aitools.errors import AiToolsPdbError, AiToolsEncError
from aitools.errors import AiToolsInitError
from aitools.common import deref_url
from teigi.errors import TeigiNotFound
from teigi.errors import TeigiBadUrl, TeigiNotAuthorized

def location_name(lan_dblocation):
    if not lan_dblocation:
        return None
    room = lan_dblocation.split(' ')[0]
    if room == '0513':
        return "(Meyrin CC)"
    elif room == '0613':
        return "(Wigner CC)"
    elif room == 'XXX':
        return '(???)'
    else:
        return ""

def get_roger_client(host):

    rogerconf = RogerConfig()
    roger = teigi.rogerclient.RogerClient(rogerconf.roger_hostname, int(rogerconf.roger_port))

    url = roger.state_url(host)
    answer = None
    if rogerconf.dereference_alias:
        url = deref_url(url)
    try:
        answer = roger.open_url(url)
    except TeigiNotAuthorized:
        sys.stderr.write("Not authorized to view '%s' in Roger" % host)
        sys.exit(3)
    except TeigiNotFound:
        return None
    except TeigiBadUrl, e:
        sys.stderr.write("Cannot open url '%s' for Roger: '%s'" % (url, e))
        sys.exit(3)
    return answer


def host_main(pargs):

    config = AiConfig()
    config.read_config_and_override_with_pargs(pargs)

    hostname = fqdnify(pargs.hostname)
    if not hostname:
        sys.stderr.write("Host %s not found in DNS\n" % pargs.hostname)
        sys.exit(1)

    pdb = PdbClient(deref_alias=config.dereference_alias)

    try:
        host_info = pdb.get_host(hostname)
    except AiToolsPdbError:
        sys.stderr.write('Host %s not found in PuppetDB!\n' % hostname)
        sys.exit(1)
    deactivated = host_info['deactivated']
    if deactivated:
        sys.stderr.write("This host was deactivated in PuppetDB at %s (%s)\n" % (deactivated,
               pytz.UTC.localize(datetime.datetime.utcnow()) - iso8601.parse_date(host_info['deactivated'])))
        sys.stderr.write("Either the host was deleted or it hasn't been running Puppet for some time.\n")
        sys.exit(2)

    facts = pdb.get_facts(hostname)

    l = pdb.get_landbsets(hostname) or '-'
    landbsets = ', '.join(l)

    lb = pdb.get_lbaliases(hostname) or '-'
    lbaliases  = ', '.join(lb)

    roger = get_roger_client(hostname)

    cnames = facts.get('landb_ip_aliases', None)
    if cnames:
        cnaliases = ', '.join([ '%s.cern.ch' % c for c in cnames.lower().split(',')])
    else:
        cnaliases = '-'

    ago = pytz.UTC.localize(datetime.datetime.utcnow()) - iso8601.parse_date(host_info['catalog_timestamp'])

    if facts.get('is_virtual', 'false') == 'true':
        vtype = "virtual"
    else:
        vtype = "physical"

    num_disks = len(facts.get('disks','').split(","))

    encclient = EncClient(deref_alias=config.dereference_alias)
    try:
        (code, enc) = encclient.get_node_enc(hostname)
    except AiToolsEncError, error:
        sys.stderr.write(str(error)+'\n')
        sys.exit(1)

    extrafacts={}
    if pargs.facts:
        ef = pargs.facts.split(',')
        for f in ef:
            extrafacts[f.strip()] = facts.get(f.strip(), None)

    extraenc={}
    if pargs.enc:
        en = pargs.enc.split(',')
        for e in en:
            extraenc[e.strip()] = enc['parameters'].get(e.strip(), None)

    if pargs.print_json:
        # Dump as JSON

        hardware = {"cores": facts.get('processorcount', None), "memory": facts.get('memorysize', None),
                    "swap": facts.get('swapsize', None),
                    "disks": num_disks, "type": vtype}
        jj = {  "hostname": hostname, "hardware": hardware, "hostgroup": facts.get('hostgroup', None),
                "responsible": facts.get('landb_responsible_email', None), "os": facts.get('operatingsystem', None),
                "fename": facts.get('fename', None),
                "lsbdistrelease": facts.get('lsbdistrelease', None), "arch": facts.get('architecture', None),
                "kernel": facts.get('configured_kernel', None), "landbsets": landbsets, "lbaliases": lbaliases,
                "ipaddress": facts.get('ipaddress', None), "ipdomain": facts.get('landb_network_domain', None),
                "lastreport": host_info['catalog_timestamp'],
                "environment": enc["environment"], "comment": enc["parameters"]["comment"],
                "cnames": cnaliases, "landb_service_name": facts.get('landb_service_name', None),
                "aidump_recordversion": 1, "cern_os_tenant": facts.get('cern_os_tenant', None)}

        if roger:
            rogga = {"appstate": roger['appstate'],
                     "hw_alarmed": roger['hw_alarmed'],
                     "os_alarmed": roger['os_alarmed'],
                     "app_alarmed": roger['app_alarmed'],
                     "nc_alarmed": roger['nc_alarmed'] }
            jj.update(rogga)

        if facts['is_virtual'] == 'true':
            jj['flavour'] = facts.get('ec2_instance_type', None)
            jj['availability_zone'] = facts.get('ec2_placement_availability_zone', None)
        else:
            jj['landb_location'] = facts.get('landb_location', None)
            jj['location_name'] = location_name(facts.get('landb_location', None))
            jj['landb_rackname'] = facts.get("landb_rackname", None)

        jj.update(extrafacts)
        jj.update(extraenc)

        print json.dumps([jj], sort_keys=True,
                             indent=4, separators=(',', ': '))

    else:
        # Text output

        t = prettytable.PrettyTable(["Item","Value"])
        t.add_row(["Hostname:", "%s" % (hostname,)])
        if facts.get('is_pdu', 'false') == 'true':
            hardware80 = facts.get('pdu_brand','unknown PDU brand')
        else:
            hardware80 = "\n".join(textwrap.wrap("%s, %s cores, %s memory, %s swap, %i disks" % (vtype, facts.get('processorcount'),
                                                                                facts.get('memorysize'), facts.get('swapsize', '-'), num_disks ), 62))
        t.add_row(["Hardware:", hardware80 ] )
        t.add_row(["Hostgroup:", facts.get('hostgroup', '-')])
        comment80 = "\n".join(textwrap.wrap(enc["parameters"]["comment"], 62))
        t.add_row(["Comment:", comment80 ])
        t.add_row(["Environment:",enc['environment']])
        t.add_row(["Responsible:", facts.get('landb_responsible_email', '-')])
        t.add_row(["FE Responsible:", facts.get('fename', '-')])
        t.add_row(["OS:", "%s %s %s (%s)" % (facts.get('operatingsystem', '-'), facts.get('lsbdistrelease', '-'), facts.get('architecture', '-'), facts.get('configured_kernel', '-'))])
        if facts.get('is_virtual') == 'true':
            t.add_row(["VM Project:", facts.get('cern_os_tenant', '-')])
            t.add_row(["VM Flavour:", facts.get('ec2_instance_type', '-')])
            t.add_row(["Avail zone:", facts.get('ec2_placement_availability_zone', '-')])
        else:
            location = location_name(facts.get('landb_location', '-'))
            t.add_row(["LanDB Location:", "%s %s   Rack: %s" % (facts.get('landb_location', '-'), location, facts.get("landb_rackname", "-"))])

        t.add_row(["LANDBsets:", landbsets])
        t.add_row(["LB aliases:", lbaliases])
        t.add_row(["CNAME aliases:",cnaliases])
        t.add_row(["IP:", "%s (%s) (%s)" % (facts.get('ipaddress', '-'), facts.get('landb_network_domain', '-'), facts.get('landb_service_name', '-'))])

        if roger:
            t.add_row(["App state:", roger['appstate']])
            rh = roger['hw_alarmed'] and 'Y' or 'N'
            ro = roger['os_alarmed'] and 'Y' or 'N'
            ra = roger['app_alarmed'] and 'Y' or 'N'
            rn = roger['nc_alarmed'] and 'Y' or 'N'
            t.add_row(["Alarm mask:", "Hardware(%s) OS(%s) App(%s) NoContact(%s)" %(rh, ro, ra, rn)])
        else:
            t.add_row(["App state:", "[not yet registered in Roger]"])
            t.add_row(["Alarm state:", "[not yet registered in Roger]"])

        if extrafacts:
            t.add_row(["",""])
            for factoid in extrafacts:
                t.add_row(["%s:" % factoid, extrafacts[factoid] or "[not found]"])

        if extraenc:
            t.add_row(["",""])
            for encoid in extraenc:
                t.add_row(["%s:" % encoid, extraenc[encoid] or "[not found]"])

        t.add_row(["",""])
        t.add_row(["Last report:", humanize.naturaltime(ago)])

        t.border=True
        t.header=False
        t.align["Item"] = 'r'
        t.align["Value"] = 'l'

        print t

def main():
    parser = ArgumentParser(description="Dump information about a host")

    try:
        krb_principal = verify_kerberos_environment()
    except AiToolsInitError, error:
        print "TGT not found or expired. Exiting..."
        return 4

    foreman_config = ForemanConfig()
    foreman_config.add_standard_args(parser)
    pdb_config = PdbConfig()
    pdb_config.add_standard_args(parser)
    enc_config = EncConfig()
    enc_config.add_standard_args(parser)
    roger_config = RogerConfig()
    roger_config.add_standard_args(parser)

    parser.add_argument("--json", action="store_true", default=False, dest="print_json",
                        help="output in JSON format")
    parser.add_argument("--facts", help="extra facts to print (comma separated)", default=None)
    parser.add_argument("--enc", help="extra ENC parameters to print (comma separated)", default=None)
    parser.add_argument("hostname", metavar="HOST", help="hostname to dump").completer = ForemanCompleter()
    argcomplete.autocomplete(parser)
    parser.set_defaults(func=host_main)

    pargs = parser.parse_args()
    pargs.func(pargs)

    sys.exit()


if __name__ == "__main__":
    main()
