#!/bin/bash
# This is a helper script that creates an skeleton
# for a Puppet module with the required directories
# and branches.
#
# Nacho Barrientos <nacho.barrientos@cern.ch>

function usage {
  echo "Usage:"
  echo "$0 -m MODULE_NAME -r URL -m MODULE_NAME [-i] [-v] [-p URL] [-b BRANCH]"
  echo "   -m Module name"
  echo "   -r URL to an empty Git repository where the module will be stored"
  echo "   -i Enable import capabilities (module migration from punch-modules)"
  echo "   -p Old punch-modules URL (defaults to: http://gitgw.cern.ch/git/punch-modules)"
  echo "   -b Branch to import from (defaults to master)"
  echo "   -v Verbose"
  echo "Examples:"
  echo " * $0 -m susie -r https://:@git.cern.ch/kerberos/it-puppet-module-susie"
  echo " * $0 -m susie -r https://:@git.cern.ch/kerberos/it-puppet-module-susie -i -v"
  exit 1
}

function dieiffail {
  [[ $? == 0 ]] || die $1 $2
}

function die {
    echo "$1" >&2
    [[ -z $2 ]] && exit -1
    exit $2
}

function debug {
  [[ $VERBOSE == "VERBOSE" ]] && echo $1
}

while getopts "m:r:p:b:iv" opt; do
  case $opt in
    m)
      MODULE_NAME=$OPTARG
    ;;
    r)
      REPOSITORY_URL=$OPTARG
    ;;
    p)
      PUNCH_MODULES_URL=$OPTARG
    ;;
    b)
      PUNCH_MODULES_BRANCH=$OPTARG
    ;;
    i)
      IMPORT="IMPORT"
    ;;
    v)
      VERBOSE="VERBOSE"
    ;;
    \?)
      usage
    ;;
  esac
done

[[ -z $MODULE_NAME ]] && usage
[[ -z $REPOSITORY_URL ]] && usage
[[ -z $PUNCH_MODULES_URL ]] && PUNCH_MODULES_URL="http://gitgw.cern.ch/git/punch-modules"
[[ -z $PUNCH_MODULES_BRANCH ]] && PUNCH_MODULES_BRANCH="master"

MODULE_NAME=$(echo $MODULE_NAME | tr '[A-Z]' '[a-z]')
REPOSITORY_NAME="it-puppet-module-$MODULE_NAME"

echo -n "Creating base structure for module '$MODULE_NAME' "
echo "in directory '$REPOSITORY_NAME'"

[[ -e $REPOSITORY_NAME ]] && die "Directory $REPOSITORY_NAME already exists"

GIT_NAME=$(git config --get user.name)
[[ -z $GIT_NAME ]] && die "Git user.name not set (man git-config)"
GIT_EMAIL=$(git config --get user.email)
[[ -z $GIT_EMAIL ]] && die "Git user.email not set (man git-config)"

# Create essential directories
debug "Creating directories..."
mkdir -p $REPOSITORY_NAME/code/templates
mkdir -p $REPOSITORY_NAME/code/manifests
mkdir -p $REPOSITORY_NAME/data

# Add some placeholders and templates
if [ ! -z $IMPORT ]; then
  echo "Cloning punch-modules (this may take a bit)..."
  CLONE_PATH=$(mktemp -d)
  git clone $PUNCH_MODULES_URL $CLONE_PATH -b $PUNCH_MODULES_BRANCH &> /dev/null
  dieiffail "Git clone (punch-modules:$PUNCH_MODULES_BRANCH) failed" 11
  debug "Copying code..."
  [[ ! -e $CLONE_PATH/modules/$MODULE_NAME ]] && \
    die "Module $MODULE_NAME does not exist in punch-modules"
  cp -R $CLONE_PATH/modules/$MODULE_NAME/* $REPOSITORY_NAME/code/
  if [ -e $CLONE_PATH/hieradata/module_names/$MODULE_NAME.yaml ]; then
    debug "Copying module hieradata (YAML)..."
    cp $CLONE_PATH/hieradata/module_names/$MODULE_NAME.yaml \
      $REPOSITORY_NAME/data
  fi
  if [ -e $CLONE_PATH/hieradata/module_names/$MODULE_NAME.gpg ]; then
    debug "Copying module hieradata (GPG)..."
    cp $CLONE_PATH/hieradata/module_names/$MODULE_NAME.gpg \
      $REPOSITORY_NAME/data
  fi
  rm -rf $CLONE_PATH
else
  debug "Nothing to import. Adding examples..."
  echo "Module '$MODULE_NAME'" > $REPOSITORY_NAME/code/README.md
  cat << EOF > $REPOSITORY_NAME/code/manifests/init.pp
class $MODULE_NAME {
}
EOF
  cat << EOF > $REPOSITORY_NAME/data/$MODULE_NAME.yaml
---
foo:bar
EOF
  cat << EOF > $REPOSITORY_NAME/code/templates/example.erb
<% if @myvar %>
myvar has <%= @myvar %> value
<% end %>
EOF
fi

debug "Inializing Git repository and mandatory branches..."
cd $REPOSITORY_NAME
git init &> /dev/null
dieiffail "Git init failed" 10
git add * &> /dev/null
dieiffail "Git add failed" 11
git commit -m "Initial commit (generated by $0)" &> /dev/null
dieiffail "Git commit failed" 12
git remote add origin $REPOSITORY_URL &> /dev/null
dieiffail "Git remote add failed" 13
debug "Pushing master branch..."
git push origin master &> /dev/null
dieiffail "Git push (master) failed" 14
git checkout -b testing &> /dev/null
dieiffail "Git checkout (testing) failed" 15
debug "Pushing testing branch..."
git push origin testing &> /dev/null
dieiffail "Git push (testing) failed" 16
git branch testing --set-upstream origin/testing &> /dev/null
dieiffail "Git branch (--set-upstream) failed" 17
cd - &> /dev/null
echo "Done"
