Content-Type: multipart/mixed; boundary="===============4259264238506844499=="
MIME-Version: 1.0

--===============4259264238506844499==
Content-Type: text/cloud-boothook; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cbh"

#cloud-boothook
#!/bin/sh
# Nacho Barrientos <nacho.barrientos@cern.ch>
# Tomas Karasek <tomas.karasek@cern.ch>

# FUNCTION execute_shell_block
# Executes function $1, $3 times at maximum
# with a wait time of $2 seconds between tries
function execute_shell_block {
  waittime=$2
  max_attempts=$3
  attemptno=1
  $1
  until [ $? == 0 ] ; do
    if [ $attemptno -eq $max_attempts ] ; then
      echo "Max number of attempts exceeded"
      return 1
    fi
    echo "Execution failed (attempt #$attemptno out of #$max_attempts) (next in $waittime secs)"
    sleep $waittime
    attemptno=$(($attemptno + 1))
    $1
  done
  return 0
}

function unrecoverable_error {
  # Recover stdout
  exec 1>&3
  echo "Step '$1' failed. Puppet won't run. Use SSH key to login."
  exit 1
}

LOCKFILE=/var/lib/cloud/boothook_lock
LOGFILE=/var/log/boothook.log

[ -e "$LOCKFILE" ] && exit 0
touch $LOCKFILE

echo "Setting up keytab, certificates and Puppet. Please wait..."
echo "In case of problems a logfile is available in $LOGFILE"

exec 3>&1
exec 1> $LOGFILE
exec 2> $LOGFILE

OS_MAJOR_VERSION=`lsb_release -r | awk '{split($2,a,"."); print a[1]}'`

# Set the hostname. Wait for the reverse to be set to make sure
# LANDB is in sync
IPADDR=`/sbin/ip -o -4 addr ls dev eth0 | awk '{split($4,a,"/"); print a[1]}'`
FINALHOSTNAME=`curl http://169.254.169.254/1.0/meta-data/hostname -s -o - | cut -f 1 -d "."`
function check_reverse {
  echo "Waiting for the correct PTR. Current hostname: $HOSTNAME. Goal: $FINALHOSTNAME"
  eval $(/bin/ipcalc --silent --hostname ${IPADDR})
  echo $HOSTNAME | /bin/grep -q $FINALHOSTNAME
}
execute_shell_block check_reverse 120 15 || unrecoverable_error "reverse"

echo "DNS updated. Setting hostname to ${HOSTNAME}"
hostname $HOSTNAME

#
# Install bootstrapping-time dependencies
#
function set_repositories {
  echo "Setting AI repository..."
  curl http://linuxsoft.cern.ch/koji/ai$OS_MAJOR_VERSION.repo > \
    /etc/yum.repos.d/ai$OS_MAJOR_VERSION.repo
  test -f /etc/yum.repos.d/ai$OS_MAJOR_VERSION.repo
}
execute_shell_block set_repositories 60 5 || unrecoverable_error "ai-repository"

DEPS="cern-get-keytab certmgr-client CERN-CA-certs"

[ "$OS_MAJOR_VERSION" == "6" ] && DEPS="$DEPS yum-plugin-priorities"
[ "$OS_MAJOR_VERSION" == "5" ] && DEPS="$DEPS yum-priorities"

function install_dependencies {
  echo "Trying to install dependencies..."
  yum install -y --enablerepo=ai$OS_MAJOR_VERSION $DEPS
  rpm -ql $DEPS > /dev/null
}
execute_shell_block install_dependencies 60 5 || unrecoverable_error "dependencies"

function install_puppet {
  echo "Trying to install puppet..."
  yum remove -y puppet
  yum install -y --enablerepo=ai$OS_MAJOR_VERSION puppet
  rpm -ql puppet > /dev/null
}
execute_shell_block install_puppet 60 5 || unrecoverable_error "puppet"

# Fill puppet.conf
cat << EOF > /etc/puppet/puppet.conf
# puppet.conf
[main]
server = lxbsp2702.cern.ch
ca_server = baby01.cern.ch
pluginsync = true
vardir = /var/lib/puppet
logdir = /var/log/puppet
rundir = /var/run/puppet
ssldir = /var/lib/puppet/ssl
runinterval = 60

[agent]
report = true
ignoreschedules = true
environment = devel
server = apachelb01.cern.ch
certificate_revocation = false
# END of puppet configuration from foreman template puppet.conf

EOF

#
# Generate kerberos keytab.
#
curl  http://straylen.web.cern.ch/straylen/krb5.conf > /etc/krb5.conf

install -m 0771 -o puppet -d /var/lib/puppet/ssl
install -m 0755 -o puppet -d /var/lib/puppet/ssl/certs

CERN_CA_BUNDLE_PATH=/var/lib/puppet/ssl/certs/ca.pem
case $OS_MAJOR_VERSION in
  "6" )
    cp -p /etc/pki/tls/certs/CERN-bundle.pem $CERN_CA_BUNDLE_PATH
    ;;
  "5" )
    cat /etc/pki/tls/certs/CERN*.pem > $CERN_CA_BUNDLE_PATH
    ;;
esac

function generate_keytab {
  echo "Calling cern-get-keytab..."
  cern-get-keytab
  test -f /etc/krb5.keytab
}
execute_shell_block generate_keytab 120 15 || unrecoverable_error "keytab"

#
# Download the host certificate
#
HOSTCERTDIR=`puppet config print certdir`
HOSTKEYDIR=`puppet config print privatekeydir`
HOSTPUBKEYDIR=`puppet config print publickeydir`
mkdir -p $HOSTCERTDIR $HOSTKEYDIR $HOSTPUBKEYDIR
chown puppet:root $HOSTCERTDIR $HOSTKEYDIR $HOSTPUBKEYDIR
HOSTKEY=`puppet config print hostprivkey`
HOSTPUBKEY=`puppet config print hostpubkey`
HOSTCERT=`puppet config print hostcert`
CACERT="/etc/pki/tls/certs/CERN-bundle.pem"
function get_host_certificate {
  echo "Getting host certificate..."
  certmgr-getcert -s baby01.cern.ch -p 8008 -w $HOSTKEYDIR > $HOSTCERT
  if [ -e "$HOSTKEYDIR/$HOSTNAME.key.pem" ]; then
    mv "$HOSTKEYDIR/$HOSTNAME.key.pem" $HOSTKEY
  fi
  openssl rsa -in $HOSTKEY -pubout 2> /dev/null > $HOSTPUBKEY
  chown puppet:root $HOSTKEY $HOSTCERT $HOSTPUBKEY
}
execute_shell_block get_host_certificate 10 15 || unrecoverable_error "getcert"

#
# Register the VM in Foreman
#
SUSIE_URL="https://aisusie.cern.ch/api/vm/registration"
FOREMAN_HOSTGROUP=%FOREMAN_HOSTGROUP%
FOREMAN_ENVIRONMENT=%FOREMAN_ENVIRONMENT%
FOREMAN_OWNER=%FOREMAN_OWNER%
SUSIE_BODY="{"
if [ ! -z $FOREMAN_HOSTGROUP ]; then
  SUSIE_BODY="$SUSIE_BODY \"hostgroup\": \"$FOREMAN_HOSTGROUP\","
fi
if [ ! -z $FOREMAN_ENVIRONMENT ]; then
  SUSIE_BODY="$SUSIE_BODY \"environment\": \"$FOREMAN_ENVIRONMENT\","
fi
if [ ! -z $FOREMAN_OWNER ]; then
  SUSIE_BODY="$SUSIE_BODY \"owner\": \"$FOREMAN_OWNER\""
fi
SUSIE_BODY="$SUSIE_BODY }"

function foreman_registration {
  echo "Registering VM in Foreman..."
  echo "Request body: $SUSIE_BODY"
  SUSIE_HTTP_CODE=$(curl -H "Content-Type: application/json" \
    -d "$SUSIE_BODY" \
    --cert $HOSTCERT --key $HOSTKEY \
    --cacert $CACERT \
    -s -L -o /dev/null --write-out "%{http_code}"\
    $SUSIE_URL)

  if [ $SUSIE_HTTP_CODE == "201" ]; then
      echo "Host registered in Foreman via Susie :-)"
      return 0
  else
      echo "Host registration failed"
      echo "HTTP status code: $SUSIE_HTTP_CODE"
      return 10
  fi
}
execute_shell_block foreman_registration 10 2 || unrecoverable_error "foreman"

# Turn puppet on for next reboot.
/sbin/chkconfig puppet on

# And start it manually as the VM won't reboot
service puppet start

# Restart syslog to make sure it logs with new hostname
service rsyslog restart

date
echo "Done"

exec 1>&3
echo "Done. Puppet is ready to run for the first time."

--===============4259264238506844499==--
