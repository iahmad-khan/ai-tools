Content-Type: multipart/mixed; boundary="===============4259264238506844499=="
MIME-Version: 1.0

--===============4259264238506844499==
Content-Type: text/cloud-boothook; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cbh"

#cloud-boothook
#!/bin/sh
# Nacho Barrientos <nacho.barrientos@cern.ch>
# Tomas Karasek <tomas.karasek@cern.ch>

# FUNCTION execute_shell_block
# Executes function $1, $3 times at maximum
# with a wait time of $2 seconds between tries
function execute_shell_block {
  waittime=$2
  max_attempts=$3
  attemptno=1
  $1
  until [ $? == 0 ] ; do
    if [ $attemptno -eq $max_attempts ] ; then
      echo "Max number of attempts exceeded" >> $LOGFILE
      return 1
    fi
    echo "Execution failed (attempt #$attemptno out of #$max_attempts) (next in $waittime secs)"
    sleep $waittime
    attemptno=$(($attemptno + 1))
    $1
  done
  return 0
}

function unrecoverable_error {
  echo "Step '$1' failed. Puppet won't run. Use SSH key (if available) to login." >> $LOGFILE
  exit 1
}

LOCKFILE=/var/lib/cloud/boothook_lock
LOGFILE=/var/log/boothook.log

[ -e "$LOCKFILE" ] && echo "This script has already run" >> $LOGFILE && exit 0
touch $LOCKFILE

echo "Setting up keytab, certificates and Puppet. Please wait..." >> $LOGFILE
date >> $LOGFILE

OS_MAJOR_VERSION=`lsb_release -r | awk '{split($2,a,"."); print a[1]}'`

# Set the hostname. Wait for the reverse to be set to make sure
# LANDB is in sync
IPADDR=`/sbin/ip -o -4 addr ls dev eth0 | awk '{split($4,a,"/"); print a[1]}'`
FINALHOSTNAME=`curl http://169.254.169.254/1.0/meta-data/hostname -s -o - | cut -f 1 -d "."`
function check_reverse {
  echo "Waiting for the correct PTR. Current hostname: $HOSTNAME. Goal: $FINALHOSTNAME"
  eval $(/bin/ipcalc --silent --hostname ${IPADDR})
  echo $HOSTNAME | /bin/grep -q $FINALHOSTNAME
}
execute_shell_block check_reverse 120 15 || unrecoverable_error "reverse"

echo "DNS updated. Setting hostname to ${HOSTNAME}" >> $LOGFILE
hostname $HOSTNAME

#
# Install bootstrapping-time dependencies
#
function set_repositories {
  echo "Setting AI repository..." >> $LOGFILE
  curl http://linuxsoft.cern.ch/koji/ai$OS_MAJOR_VERSION.repo > \
    /etc/yum.repos.d/ai$OS_MAJOR_VERSION.repo
  test -f /etc/yum.repos.d/ai$OS_MAJOR_VERSION.repo
}
execute_shell_block set_repositories 60 5 || unrecoverable_error "ai-repository"

DEPS="cern-get-keytab certmgr-client CERN-CA-certs augeas"

[ "$OS_MAJOR_VERSION" == "6" ] && DEPS="$DEPS yum-plugin-priorities"
[ "$OS_MAJOR_VERSION" == "5" ] && DEPS="$DEPS yum-priorities"

function install_dependencies {
  echo "Trying to install dependencies..." >> $LOGFILE
  yum install -y --enablerepo=ai$OS_MAJOR_VERSION $DEPS
  rpm -ql $DEPS > /dev/null
}
execute_shell_block install_dependencies 60 5 || unrecoverable_error "dependencies"

function install_puppet {
  echo "Trying to install puppet from AI repositories..." >> $LOGFILE
  yum remove -y puppet
  yum install -y --enablerepo=ai$OS_MAJOR_VERSION puppet
  rpm -ql puppet > /dev/null
}
execute_shell_block install_puppet 60 5 || unrecoverable_error "puppet"

#
# Generate puppet.conf
#
echo "Generating initial puppet.conf..." >> $LOGFILE
cat << EOF > /etc/puppet/puppet.conf
# puppet.conf
[main]
server = %PUPPETMASTER_HOSTNAME%
ca_server = %CASERVER_HOSTNAME%
pluginsync = true
vardir = /var/lib/puppet
logdir = /var/log/puppet
rundir = /var/run/puppet
ssldir = /var/lib/puppet/ssl
runinterval = 1800
environment = %FOREMAN_ENVIRONMENT%

[agent]
report = true
ignoreschedules = true
certificate_revocation = false
dynamicfacts = memorysize,memoryfree,swapsize,swapfree,uptime_seconds,uptime_hours
configtimeout = 500
EOF

#
# Generate kerberos keytab.
#
echo "Generating initial krb5.conf..." >> $LOGFILE
cat << EOF > /etc/krb5.conf
[libdefaults]
 default_realm = CERN.CH
 ticket_lifetime = 25h
 renew_lifetime = 120h
 forwardable = true
 proxiable = true
 default_tkt_enctypes = arcfour-hmac-md5 aes256-cts aes128-cts des3-cbc-sha1 des-cbc-md5 des-cbc-crc

[appdefaults]
  pam = {
         external = true
         krb4_convert = false
         krb4_convert_524 = false
         krb4_use_as_req = false
  }

[domain_realm]
  .cern.ch = CERN.CH

[realms]
  CERN.CH  = {
    default_domain = cern.ch
    kpasswd_server = afskrb5m.cern.ch
    admin_server = afskrb5m.cern.ch
    kdc = cerndc.cern.ch
    v4_name_convert = {
      host = {
        rcmd = host
      }
    }
  }
EOF

install -m 0771 -o puppet -d /var/lib/puppet/ssl
install -m 0755 -o puppet -d /var/lib/puppet/ssl/certs

CERN_CA_BUNDLE_PATH=/var/lib/puppet/ssl/certs/ca.pem
case $OS_MAJOR_VERSION in
  "6" )
    cp -p /etc/pki/tls/certs/CERN-bundle.pem $CERN_CA_BUNDLE_PATH
    ;;
  "5" )
    cat /etc/pki/tls/certs/CERN*.pem > $CERN_CA_BUNDLE_PATH
    ;;
esac

function generate_keytab {
  echo "Calling cern-get-keytab..." >> $LOGFILE
  cern-get-keytab
  [[ $? -ne 0 ]] && echo "cern-get-keytab didn't return 0" && return 1
  test -s /etc/krb5.keytab
}
execute_shell_block generate_keytab 120 15 || unrecoverable_error "keytab"

#
# Download the host certificate
#
HOSTCERTDIR=`puppet config print certdir`
HOSTKEYDIR=`puppet config print privatekeydir`
HOSTPUBKEYDIR=`puppet config print publickeydir`
mkdir -p $HOSTCERTDIR $HOSTKEYDIR $HOSTPUBKEYDIR
chown puppet:root $HOSTCERTDIR $HOSTKEYDIR $HOSTPUBKEYDIR
HOSTKEY=`puppet config print hostprivkey`
HOSTPUBKEY=`puppet config print hostpubkey`
HOSTCERT=`puppet config print hostcert`
CACERT="/etc/pki/tls/certs/CERN-bundle.pem"
function get_host_certificate {
  echo "Getting host certificate..." >> $LOGFILE
  certmgr-getcert -s %CASERVER_HOSTNAME% -p 8008 -w $HOSTKEYDIR > $HOSTCERT
  [[ $? -ne 0 ]] && echo "certmgr-getcert didn't return 0" && return 1
  if [ -e "$HOSTKEYDIR/$HOSTNAME.key.pem" ]; then
    mv "$HOSTKEYDIR/$HOSTNAME.key.pem" $HOSTKEY
  fi
  [[ ! -s $HOSTKEY ]] && echo "Host key not created" && return 1
  [[ ! -s $HOSTCERT ]] && echo "Host cert not created" && return 1
  openssl rsa -in $HOSTKEY -pubout 2> /dev/null > $HOSTPUBKEY
  chown puppet:root $HOSTKEY $HOSTCERT $HOSTPUBKEY
  test -s $HOSTPUBKEY
}
execute_shell_block get_host_certificate 10 15 || unrecoverable_error "getcert"

#
# Register the VM in Foreman
#
SUSIE_HOSTPORT=%SUSIE_HOST%:%SUSIE_PORT%
SUSIE_URL="https://$SUSIE_HOSTPORT/api/vm/registration"
FOREMAN_HOSTGROUP=%FOREMAN_HOSTGROUP%
FOREMAN_ENVIRONMENT=%FOREMAN_ENVIRONMENT%
SUSIE_BODY="{"
if [ ! -z $FOREMAN_HOSTGROUP ]; then
  SUSIE_BODY="$SUSIE_BODY \"hostgroup\": \"$FOREMAN_HOSTGROUP\","
fi
if [ ! -z $FOREMAN_ENVIRONMENT ]; then
  SUSIE_BODY="$SUSIE_BODY \"environment\": \"$FOREMAN_ENVIRONMENT\""
fi
SUSIE_BODY="$SUSIE_BODY }"

function foreman_registration {
  echo "Registering VM in Foreman..." >> $LOGFILE
  SUSIE_HTTP_CODE=$(curl -H "Content-Type: application/json" \
    -d "$SUSIE_BODY" \
    --cert $HOSTCERT --key $HOSTKEY \
    --cacert $CACERT \
    -s -L -o /dev/null --write-out "%{http_code}"\
    $SUSIE_URL)

  if [ $SUSIE_HTTP_CODE == "201" ]; then
      echo "Host registered in Foreman via Susie :-)" >> $LOGFILE
      return 0
  elif [ $SUSIE_HTTP_CODE == "000" ]; then
      echo "Host registration failed" >> $LOGFILE
      echo "Susie call failed (no network, bad certificates...)" >> $LOGFILE
      return 10
  else
      echo "Host registration failed" >> $LOGFILE
      echo "HTTP status code: $SUSIE_HTTP_CODE" >> $LOGFILE
      return 11
  fi
}
execute_shell_block foreman_registration 10 2 || unrecoverable_error "foreman"

# Clean up /etc/yum.repos.d/, no longer necessary.
# Puppet will recreate all of them.
/bin/rm -rf /etc/yum.repos.d/*.repo

# Because of: 418aa59f5c348bc97cfc48011ecdda62c26b5e36
/bin/mkdir -p /etc/yum-puppet.repos.d
/usr/bin/augtool -s set /files/etc/yum.conf/main/reposdir /etc/yum-puppet.repos.d/

# Make sure runs in the background use the batch cluster
/usr/bin/augtool -s set /files/etc/sysconfig/puppet/PUPPET_PORT 8150
/bin/echo "set /files/etc/sysconfig/puppet/PUPPET_EXTRA_OPTS --ca_port=8140" | augtool -s

# Turn puppet on for next reboot.
/sbin/chkconfig puppet on

# And start it manually as the VM won't reboot
service puppet restart

# Restart syslog to make sure it logs with new hostname
service rsyslog restart

echo "Done. Puppet is ready to run for the first time." >> $LOGFILE
date >> $LOGFILE

--===============4259264238506844499==--
