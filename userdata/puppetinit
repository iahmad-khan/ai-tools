#!/bin/sh
# Nacho Barrientos <nacho.barrientos@cern.ch>
# This is a template that will be filled in by
# ai-bs-vm. Don't use directly as a user script
# as it won't work as expected.

# FUNCTION execute_shell_block
# Executes function $1, $3 times at maximum
# with a wait time of $2 seconds between tries
function execute_shell_block {
  waittime=$2
  max_attempts=$3
  attemptno=1
  $1
  until [ $? == 0 ] ; do
    if [ $attemptno -eq $max_attempts ] ; then
      echo "Max number of attempts exceeded"
      return 1
    fi
    echo "Execution failed (attempt #$attemptno out of #$max_attempts) (next in $waittime secs)"
    sleep $waittime
    attemptno=$(($attemptno + 1))
    $1
  done
  return 0
}

function unrecoverable_error {
  echo "Step '$1' failed. Puppet won't run. Use SSH key (if available) to login."
  exit 1
}

LOCKFILE=/var/lib/cloud/puppetinit.lock

date
[ -e "$LOCKFILE" ] && echo "Puppet init has already run. Exiting." && exit 0
touch $LOCKFILE

echo "Setting up Puppet for the initial run. Please wait..."

# redhat > 7 and new debians seem to have this file.
if [ -f /etc/os-release ] ; then
  . /etc/os-release
  OS_MAJOR_VERSION=$VERSION_ID
  OS_DISTRIBUTOR_ID=$ID
else
  OS_MAJOR_VERSION=`lsb_release -r | awk '{split($2,a,"."); print a[1]}'`
  OS_MINOR_VERSION=`lsb_release -r | awk '{split($2,a,"."); print a[2]}'`
  OS_DISTRIBUTOR_ID=`lsb_release -i | awk '{print $3}'`
fi

FINALHOSTNAME=`curl http://169.254.169.254/1.0/meta-data/hostname -s -o -`
echo "Setting hostname to ${FINALHOSTNAME}"
hostname $FINALHOSTNAME

#
# Install bootstrapping-time dependencies
#
function set_repositories {
  echo "Setting AI repository..."
  curl http://linuxsoft.cern.ch/internal/repos/ai$OS_MAJOR_VERSION.repo > \
    /etc/yum.repos.d/ai$OS_MAJOR_VERSION.repo
  test -f /etc/yum.repos.d/ai$OS_MAJOR_VERSION.repo
}
execute_shell_block set_repositories 60 5 || unrecoverable_error "ai-repository"

function set_slc_for_rhel_repositories {
  echo "Setting RHEL repository..."

  # SLC5 specific bits
  if [ "$OS_MAJOR_VERSION" == "5" ]; then
    # get yum-conf RPM
    yumconfrpm=http://linuxsoft.cern.ch/cern/slc5X/x86_64/yum/updates//yum-conf-5X-9.slc5.noarch.rpm
    rm -rf /tmp/yum-conf
    mkdir /tmp/yum-conf && cd /tmp/yum-conf
    rpm2cpio ${yumconfrpm} | cpio -ivd || exit 1

    # get sl-release RPM
    baseurl=http://linuxsoft.cern.ch/cern/slc${OS_MAJOR_VERSION}X/updates/x86_64/SRPMS/
    slreleaserpm=`curl ${baseurl} | awk -F\" "/sl-release-${OS_MAJOR_VERSION}.${OS_MINOR_VERSION}/ {print \\$2}" | sort | tail -1`
    rm -rf /tmp/sl-release
    mkdir /tmp/sl-release && cd /tmp/sl-release
    rpm2cpio ${baseurl}/${slreleaserpm} | cpio -ivd || exit 1
    cd /tmp
    rm -rf slc-release-${OS_MAJOR_VERSION}
    tar xzvf /tmp/sl-release/sl-release-${OS_MAJOR_VERSION}.${OS_MINOR_VERSION}.tar.gz || return 1

    # install needed repos
    repos="slc${OS_MAJOR_VERSION}-cernonly slc${OS_MAJOR_VERSION}-os epel"
    for repo in ${repos}
    do
      echo "Copying ${repo}"
      cp /tmp/yum-conf/etc/yum.repos.d/${repo}.repo /etc/yum.repos.d/ || exit 1
    done

    # install needed GPG Keys
    gpgkeys="RPM-GPG-KEY-EPEL"
    for gpgkey in ${gpgkeys}
    do
      echo "Copying ${gpgkey}"
      cp /tmp/yum-conf/etc/pki/rpm-gpg/${gpgkey} /etc/pki/rpm-gpg/ || exit 1
    done
    gpgkeys="RPM-GPG-KEY-cern RPM-GPG-KEY-jpolok RPM-GPG-KEY-csieh RPM-GPG-KEY-dawson"
    for gpgkey in ${gpgkeys}
    do
      echo "Copying ${gpgkey}"
      cp /tmp/sl-release-${OS_MAJOR_VERSION}.${OS_MINOR_VERSION}/${gpgkey} /etc/pki/rpm-gpg/ || exit 1
    done

  # SLC6 specific bits
  else if [ "$OS_MAJOR_VERSION" == "6" ]; then
    # get sl-release RPM
    baseurl=http://linuxsoft.cern.ch/cern/slc${OS_MAJOR_VERSION}X/updates/x86_64/SRPMS/
    slreleaserpm=`curl ${baseurl} | awk -F\" '/sl-release/ {print $2}' | sort | tail -1`
    rpm -ivh ${baseurl}/${slreleaserpm} || return 1
    cd /tmp
    rm -rf slc-release-${OS_MAJOR_VERSION}
    tar xzvf /rpmbuild/SOURCES/slc-release-${OS_MAJOR_VERSION}.tar.gz || return 1

    # install needed repos
    repos="slc${OS_MAJOR_VERSION}-cernonly slc${OS_MAJOR_VERSION}-os epel"
    for repo in ${repos}
    do
      echo "Copying ${repo}"
      cp /tmp/slc-release-${OS_MAJOR_VERSION}/${repo}.repo /etc/yum.repos.d/
      test -f /etc/yum.repos.d/${repo}.repo || return 1
    done

    # install needed GPG Keys
    gpgkeys="RPM-GPG-KEY-cern RPM-GPG-KEY-EPEL-${OS_MAJOR_VERSION}"
    for gpgkey in ${gpgkeys}
    do
      echo "Copying ${gpgkey}"
      cp /tmp/slc-release-${OS_MAJOR_VERSION}/${gpgkey} /etc/pki/rpm-gpg/
      test -f /etc/pki/rpm-gpg/${gpgkey} || return 1
    done
  fi
  fi

}
[[ "${OS_DISTRIBUTOR_ID}" = "RedHatEnterpriseServer" || "${OS_DISTRIBUTOR_ID}" = "rhel" ]] && \
  ( execute_shell_block set_slc_for_rhel_repositories 60 5 || unrecoverable_error "slc-rhel-repository" )

DEPS="cern-get-keytab certmgr-client CERN-CA-certs augeas rubygems rubygem-landb rubygem-savon"

[ "$OS_MAJOR_VERSION" == "7" ] && DEPS="$DEPS yum-plugin-priorities"
[ "$OS_MAJOR_VERSION" == "6" ] && DEPS="$DEPS yum-plugin-priorities"
[ "$OS_MAJOR_VERSION" == "5" ] && DEPS="$DEPS yum-priorities"

AIREPO="ai$OS_MAJOR_VERSION"
[[ $(echo $_FOREMAN_ENVIRONMENT | tr '[:upper:]' '[:lower:]') == 'qa' ]] && AIREPO="$AIREPO-qa"

function install_dependencies {
  echo "Trying to install dependencies..."
  yum install -y --enablerepo=$AIREPO $DEPS
  rpm -ql $DEPS > /dev/null
}
execute_shell_block install_dependencies 60 5 || unrecoverable_error "dependencies"

function install_puppet {
  echo "Trying to install puppet and facter from AI repositories..."
  yum remove -y puppet facter
  yum install -y --enablerepo=$AIREPO puppet facter
  rpm -ql puppet > /dev/null
}
execute_shell_block install_puppet 60 5 || unrecoverable_error "puppet"

#
# Generate puppet.conf
#
echo "Generating initial puppet.conf..."
cat << EOF > /etc/puppet/puppet.conf
# puppet.conf
# Generated by ai-bs-vm
[main]
server = $_PUPPETMASTER_HOSTNAME
ca_server = $_CASERVER_HOSTNAME
pluginsync = true
vardir = /var/lib/puppet
logdir = /var/log/puppet
rundir = /var/run/puppet
ssldir = /var/lib/puppet/ssl

[agent]
stringify_facts = false
report = true
ignoreschedules = true
certificate_revocation = false
dynamicfacts = memorysize,memoryfree,swapsize,swapfree,uptime_seconds,uptime_hours
configtimeout = 500
runinterval = 600
environment = $_FOREMAN_ENVIRONMENT
EOF

#
# Generate kerberos keytab.
#
echo "Generating initial krb5.conf..."
cat << EOF > /etc/krb5.conf
# krb5.conf
# Generated by ai-bs-vm
[libdefaults]
 default_realm = CERN.CH
 ticket_lifetime = 25h
 renew_lifetime = 120h
 forwardable = true
 proxiable = true
 default_tkt_enctypes = arcfour-hmac-md5 aes256-cts aes128-cts des3-cbc-sha1 des-cbc-md5 des-cbc-crc

[appdefaults]
  pam = {
         external = true
         krb4_convert = false
         krb4_convert_524 = false
         krb4_use_as_req = false
  }

[domain_realm]
  .cern.ch = CERN.CH

[realms]
  CERN.CH  = {
    default_domain = cern.ch
    kpasswd_server = cerndc.cern.ch
    admin_server = cerndc.cern.ch
    kdc = cerndc.cern.ch
    v4_name_convert = {
      host = {
        rcmd = host
      }
    }
  }
EOF

install -m 0771 -o puppet -d /var/lib/puppet/ssl
install -m 0755 -o puppet -d /var/lib/puppet/ssl/certs

CERN_CA_BUNDLE_PATH=/var/lib/puppet/ssl/certs/ca.pem
case $OS_MAJOR_VERSION in
  "7"|"6" )
    cp -p /etc/pki/tls/certs/CERN-bundle.pem $CERN_CA_BUNDLE_PATH
    ;;
  "5" )
    cat /etc/pki/tls/certs/CERN*.pem > $CERN_CA_BUNDLE_PATH
    ;;
esac

#
# Download the host certificate
#
HOSTCERTDIR=`puppet config print certdir`
HOSTKEYDIR=`puppet config print privatekeydir`
HOSTPUBKEYDIR=`puppet config print publickeydir`
mkdir -p $HOSTCERTDIR $HOSTKEYDIR $HOSTPUBKEYDIR
chown puppet:root $HOSTCERTDIR $HOSTKEYDIR $HOSTPUBKEYDIR
HOSTKEY=`puppet config print hostprivkey`
HOSTPUBKEY=`puppet config print hostpubkey`
HOSTCERT=`puppet config print hostcert`
function get_host_certificate {
  echo "Getting host certificate..."
  certmgr-getcert -s $_CASERVER_HOSTNAME -p $_CASERVER_PORT -w $HOSTKEYDIR -o $HOSTCERT
  [[ $? -ne 0 ]] && echo "certmgr-getcert didn't return 0" && return 1
  [[ ! -s $HOSTKEY ]] && echo "Host key not created" && return 1
  [[ ! -s $HOSTCERT ]] && echo "Host cert not created" && return 1
  openssl rsa -in $HOSTKEY -pubout 2> /dev/null > $HOSTPUBKEY
  chown puppet:root $HOSTKEY $HOSTCERT $HOSTPUBKEY
  test -s $HOSTPUBKEY
}
execute_shell_block get_host_certificate 10 15 || unrecoverable_error "getcert"

# Clean up /etc/yum.repos.d/, no longer necessary.
# Puppet will recreate all of them.
/bin/rm -rf /etc/yum.repos.d/*.repo

# Because of: 418aa59f5c348bc97cfc48011ecdda62c26b5e36
/bin/mkdir -p /etc/yum-puppet.repos.d
/usr/bin/augtool -s set /files/etc/yum.conf/main/reposdir /etc/yum-puppet.repos.d/

echo "Generating initial /etc/sysconfig/puppet"
cat << EOF > /etc/sysconfig/puppet
PUPPET_EXTRA_OPTS="--waitforcert=500 --masterport=8150 --ca_port=8140"
EOF

# Turn puppet on for next boot.
/sbin/chkconfig puppet on

# Restart syslog to make sure it logs with new hostname
service rsyslog restart

if [ $OS_MAJOR_VERSION -ge 6 ]
  then
    date
    echo "Waiting for a time slot to run Puppet (osrepos tag only)..."
    /bin/sleep $(/usr/bin/expr $RANDOM % 180)
    echo "Running Puppet to configure only the YUM repositories"
    /usr/bin/puppet agent -t --tags osrepos --masterport 8150 \
        --ca_port 8140 --waitforcert 120 --color=FALSE
    echo "Running yum distro-sync for the first time..."
    [[ -x /usr/local/sbin/distro_sync.sh ]] \
      && /usr/local/sbin/distro_sync.sh && cat /var/log/distro_sync.log \
      || echo "Distro_sync.sh not found. Either disabled or Puppet failed to install it."
    [[ $_NO_GROW -eq 1 ]] \
      || (echo "Growing /dev/vda$_GROWPART_VDA_PARTITION to use all the available space..." \
      && growpart /dev/vda $_GROWPART_VDA_PARTITION)
    date
    cp /var/log/boot.log /var/log/firstboot.log
    chmod 600 /var/log/firstboot.log
    [[ $_NO_REBOOT -eq 1 ]] || (echo "The VM will now reboot" && /sbin/reboot)
    [[ $_NO_REBOOT -eq 1 ]] && /sbin/service puppet start
else
    /sbin/service puppet start
    echo "Done. Puppet is ready to run"
    date
fi
